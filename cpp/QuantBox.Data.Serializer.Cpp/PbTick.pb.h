// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbTick.proto

#ifndef PROTOBUF_PbTick_2eproto__INCLUDED
#define PROTOBUF_PbTick_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace QuantBox {
namespace Data {
namespace Serializer {
namespace V2 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PbTick_2eproto();
void protobuf_AssignDesc_PbTick_2eproto();
void protobuf_ShutdownFile_PbTick_2eproto();

class BarInfo;
class ConfigInfo;
class DepthTick;
class PbTick;
class StaticInfo;
class StockSplitInfo;

// ===================================================================

class BarInfo : public ::google::protobuf::Message {
 public:
  BarInfo();
  virtual ~BarInfo();

  BarInfo(const BarInfo& from);

  inline BarInfo& operator=(const BarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BarInfo& default_instance();

  void Swap(BarInfo* other);

  // implements Message ----------------------------------------------

  inline BarInfo* New() const { return New(NULL); }

  BarInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BarInfo& from);
  void MergeFrom(const BarInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BarInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Open = 1 [default = 0];
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 1;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);

  // optional sint32 High = 2 [default = 0];
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 2;
  inline ::google::protobuf::int32 high() const;
  inline void set_high(::google::protobuf::int32 value);

  // optional sint32 Low = 3 [default = 0];
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 3;
  inline ::google::protobuf::int32 low() const;
  inline void set_low(::google::protobuf::int32 value);

  // optional sint32 Close = 4 [default = 0];
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline ::google::protobuf::int32 close() const;
  inline void set_close(::google::protobuf::int32 value);

  // optional sint32 BarSize = 5 [default = 0];
  inline bool has_barsize() const;
  inline void clear_barsize();
  static const int kBarSizeFieldNumber = 5;
  inline ::google::protobuf::int32 barsize() const;
  inline void set_barsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QuantBox.Data.Serializer.V2.BarInfo)
 private:
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_barsize();
  inline void clear_has_barsize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 open_;
  ::google::protobuf::int32 high_;
  ::google::protobuf::int32 low_;
  ::google::protobuf::int32 close_;
  ::google::protobuf::int32 barsize_;
  friend void  protobuf_AddDesc_PbTick_2eproto();
  friend void protobuf_AssignDesc_PbTick_2eproto();
  friend void protobuf_ShutdownFile_PbTick_2eproto();

  void InitAsDefaultInstance();
  static BarInfo* default_instance_;
};
// -------------------------------------------------------------------

class ConfigInfo : public ::google::protobuf::Message {
 public:
  ConfigInfo();
  virtual ~ConfigInfo();

  ConfigInfo(const ConfigInfo& from);

  inline ConfigInfo& operator=(const ConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigInfo& default_instance();

  void Swap(ConfigInfo* other);

  // implements Message ----------------------------------------------

  inline ConfigInfo* New() const { return New(NULL); }

  ConfigInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigInfo& from);
  void MergeFrom(const ConfigInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Version = 1 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 TickSize = 2 [default = 0];
  inline bool has_ticksize() const;
  inline void clear_ticksize();
  static const int kTickSizeFieldNumber = 2;
  inline ::google::protobuf::int32 ticksize() const;
  inline void set_ticksize(::google::protobuf::int32 value);

  // optional double TickSizeMultiplier = 3 [default = 0];
  inline bool has_ticksizemultiplier() const;
  inline void clear_ticksizemultiplier();
  static const int kTickSizeMultiplierFieldNumber = 3;
  inline double ticksizemultiplier() const;
  inline void set_ticksizemultiplier(double value);

  // optional int32 SettlementPriceMultiplier = 4 [default = 0];
  inline bool has_settlementpricemultiplier() const;
  inline void clear_settlementpricemultiplier();
  static const int kSettlementPriceMultiplierFieldNumber = 4;
  inline ::google::protobuf::int32 settlementpricemultiplier() const;
  inline void set_settlementpricemultiplier(::google::protobuf::int32 value);

  // optional int32 AveragePriceMultiplier = 5 [default = 0];
  inline bool has_averagepricemultiplier() const;
  inline void clear_averagepricemultiplier();
  static const int kAveragePriceMultiplierFieldNumber = 5;
  inline ::google::protobuf::int32 averagepricemultiplier() const;
  inline void set_averagepricemultiplier(::google::protobuf::int32 value);

  // optional double ContractMultiplier = 6 [default = 0];
  inline bool has_contractmultiplier() const;
  inline void clear_contractmultiplier();
  static const int kContractMultiplierFieldNumber = 6;
  inline double contractmultiplier() const;
  inline void set_contractmultiplier(double value);

  // optional int32 Time_ssf_Diff = 7 [default = 0];
  inline bool has_time_ssf_diff() const;
  inline void clear_time_ssf_diff();
  static const int kTimeSsfDiffFieldNumber = 7;
  inline ::google::protobuf::int32 time_ssf_diff() const;
  inline void set_time_ssf_diff(::google::protobuf::int32 value);

  // optional int32 MarketDepth = 8 [default = 0];
  inline bool has_marketdepth() const;
  inline void clear_marketdepth();
  static const int kMarketDepthFieldNumber = 8;
  inline ::google::protobuf::int32 marketdepth() const;
  inline void set_marketdepth(::google::protobuf::int32 value);

  // optional int32 MarketType = 9 [default = 0];
  inline bool has_markettype() const;
  inline void clear_markettype();
  static const int kMarketTypeFieldNumber = 9;
  inline ::google::protobuf::int32 markettype() const;
  inline void set_markettype(::google::protobuf::int32 value);

  // optional int32 Volume_Total_Or_Increment = 10 [default = 0];
  inline bool has_volume_total_or_increment() const;
  inline void clear_volume_total_or_increment();
  static const int kVolumeTotalOrIncrementFieldNumber = 10;
  inline ::google::protobuf::int32 volume_total_or_increment() const;
  inline void set_volume_total_or_increment(::google::protobuf::int32 value);

  // optional int32 Turnover_Total_Or_Increment = 11 [default = 0];
  inline bool has_turnover_total_or_increment() const;
  inline void clear_turnover_total_or_increment();
  static const int kTurnoverTotalOrIncrementFieldNumber = 11;
  inline ::google::protobuf::int32 turnover_total_or_increment() const;
  inline void set_turnover_total_or_increment(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QuantBox.Data.Serializer.V2.ConfigInfo)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_ticksize();
  inline void clear_has_ticksize();
  inline void set_has_ticksizemultiplier();
  inline void clear_has_ticksizemultiplier();
  inline void set_has_settlementpricemultiplier();
  inline void clear_has_settlementpricemultiplier();
  inline void set_has_averagepricemultiplier();
  inline void clear_has_averagepricemultiplier();
  inline void set_has_contractmultiplier();
  inline void clear_has_contractmultiplier();
  inline void set_has_time_ssf_diff();
  inline void clear_has_time_ssf_diff();
  inline void set_has_marketdepth();
  inline void clear_has_marketdepth();
  inline void set_has_markettype();
  inline void clear_has_markettype();
  inline void set_has_volume_total_or_increment();
  inline void clear_has_volume_total_or_increment();
  inline void set_has_turnover_total_or_increment();
  inline void clear_has_turnover_total_or_increment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 ticksize_;
  double ticksizemultiplier_;
  ::google::protobuf::int32 settlementpricemultiplier_;
  ::google::protobuf::int32 averagepricemultiplier_;
  double contractmultiplier_;
  ::google::protobuf::int32 time_ssf_diff_;
  ::google::protobuf::int32 marketdepth_;
  ::google::protobuf::int32 markettype_;
  ::google::protobuf::int32 volume_total_or_increment_;
  ::google::protobuf::int32 turnover_total_or_increment_;
  friend void  protobuf_AddDesc_PbTick_2eproto();
  friend void protobuf_AssignDesc_PbTick_2eproto();
  friend void protobuf_ShutdownFile_PbTick_2eproto();

  void InitAsDefaultInstance();
  static ConfigInfo* default_instance_;
};
// -------------------------------------------------------------------

class DepthTick : public ::google::protobuf::Message {
 public:
  DepthTick();
  virtual ~DepthTick();

  DepthTick(const DepthTick& from);

  inline DepthTick& operator=(const DepthTick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepthTick& default_instance();

  void Swap(DepthTick* other);

  // implements Message ----------------------------------------------

  inline DepthTick* New() const { return New(NULL); }

  DepthTick* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepthTick& from);
  void MergeFrom(const DepthTick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DepthTick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Value1 = 1 [default = 0];
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 1;
  inline ::google::protobuf::int32 value1() const;
  inline void set_value1(::google::protobuf::int32 value);

  // optional sint32 Value2 = 2 [default = 0];
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 2;
  inline ::google::protobuf::int32 value2() const;
  inline void set_value2(::google::protobuf::int32 value);

  // optional sint32 Value3 = 3 [default = 0];
  inline bool has_value3() const;
  inline void clear_value3();
  static const int kValue3FieldNumber = 3;
  inline ::google::protobuf::int32 value3() const;
  inline void set_value3(::google::protobuf::int32 value);

  // optional sint32 Value4 = 4 [default = 0];
  inline bool has_value4() const;
  inline void clear_value4();
  static const int kValue4FieldNumber = 4;
  inline ::google::protobuf::int32 value4() const;
  inline void set_value4(::google::protobuf::int32 value);

  // optional sint32 Value5 = 5 [default = 0];
  inline bool has_value5() const;
  inline void clear_value5();
  static const int kValue5FieldNumber = 5;
  inline ::google::protobuf::int32 value5() const;
  inline void set_value5(::google::protobuf::int32 value);

  // optional sint32 Value6 = 6 [default = 0];
  inline bool has_value6() const;
  inline void clear_value6();
  static const int kValue6FieldNumber = 6;
  inline ::google::protobuf::int32 value6() const;
  inline void set_value6(::google::protobuf::int32 value);

  // optional sint32 Value7 = 7 [default = 0];
  inline bool has_value7() const;
  inline void clear_value7();
  static const int kValue7FieldNumber = 7;
  inline ::google::protobuf::int32 value7() const;
  inline void set_value7(::google::protobuf::int32 value);

  // optional sint32 Value8 = 8 [default = 0];
  inline bool has_value8() const;
  inline void clear_value8();
  static const int kValue8FieldNumber = 8;
  inline ::google::protobuf::int32 value8() const;
  inline void set_value8(::google::protobuf::int32 value);

  // optional sint32 Value9 = 9 [default = 0];
  inline bool has_value9() const;
  inline void clear_value9();
  static const int kValue9FieldNumber = 9;
  inline ::google::protobuf::int32 value9() const;
  inline void set_value9(::google::protobuf::int32 value);

  // optional sint32 Value10 = 10 [default = 0];
  inline bool has_value10() const;
  inline void clear_value10();
  static const int kValue10FieldNumber = 10;
  inline ::google::protobuf::int32 value10() const;
  inline void set_value10(::google::protobuf::int32 value);

  // optional sint32 Value11 = 11 [default = 0];
  inline bool has_value11() const;
  inline void clear_value11();
  static const int kValue11FieldNumber = 11;
  inline ::google::protobuf::int32 value11() const;
  inline void set_value11(::google::protobuf::int32 value);

  // optional sint32 Value12 = 12 [default = 0];
  inline bool has_value12() const;
  inline void clear_value12();
  static const int kValue12FieldNumber = 12;
  inline ::google::protobuf::int32 value12() const;
  inline void set_value12(::google::protobuf::int32 value);

  // optional sint32 Value13 = 13 [default = 0];
  inline bool has_value13() const;
  inline void clear_value13();
  static const int kValue13FieldNumber = 13;
  inline ::google::protobuf::int32 value13() const;
  inline void set_value13(::google::protobuf::int32 value);

  // optional sint32 Value14 = 14 [default = 0];
  inline bool has_value14() const;
  inline void clear_value14();
  static const int kValue14FieldNumber = 14;
  inline ::google::protobuf::int32 value14() const;
  inline void set_value14(::google::protobuf::int32 value);

  // optional .QuantBox.Data.Serializer.V2.DepthTick Next = 15;
  inline bool has_next() const;
  inline void clear_next();
  static const int kNextFieldNumber = 15;
  inline const ::QuantBox::Data::Serializer::V2::DepthTick& next() const;
  inline ::QuantBox::Data::Serializer::V2::DepthTick* mutable_next();
  inline ::QuantBox::Data::Serializer::V2::DepthTick* release_next();
  inline void set_allocated_next(::QuantBox::Data::Serializer::V2::DepthTick* next);

  // @@protoc_insertion_point(class_scope:QuantBox.Data.Serializer.V2.DepthTick)
 private:
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();
  inline void set_has_value3();
  inline void clear_has_value3();
  inline void set_has_value4();
  inline void clear_has_value4();
  inline void set_has_value5();
  inline void clear_has_value5();
  inline void set_has_value6();
  inline void clear_has_value6();
  inline void set_has_value7();
  inline void clear_has_value7();
  inline void set_has_value8();
  inline void clear_has_value8();
  inline void set_has_value9();
  inline void clear_has_value9();
  inline void set_has_value10();
  inline void clear_has_value10();
  inline void set_has_value11();
  inline void clear_has_value11();
  inline void set_has_value12();
  inline void clear_has_value12();
  inline void set_has_value13();
  inline void clear_has_value13();
  inline void set_has_value14();
  inline void clear_has_value14();
  inline void set_has_next();
  inline void clear_has_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 value1_;
  ::google::protobuf::int32 value2_;
  ::google::protobuf::int32 value3_;
  ::google::protobuf::int32 value4_;
  ::google::protobuf::int32 value5_;
  ::google::protobuf::int32 value6_;
  ::google::protobuf::int32 value7_;
  ::google::protobuf::int32 value8_;
  ::google::protobuf::int32 value9_;
  ::google::protobuf::int32 value10_;
  ::google::protobuf::int32 value11_;
  ::google::protobuf::int32 value12_;
  ::google::protobuf::int32 value13_;
  ::google::protobuf::int32 value14_;
  ::QuantBox::Data::Serializer::V2::DepthTick* next_;
  friend void  protobuf_AddDesc_PbTick_2eproto();
  friend void protobuf_AssignDesc_PbTick_2eproto();
  friend void protobuf_ShutdownFile_PbTick_2eproto();

  void InitAsDefaultInstance();
  static DepthTick* default_instance_;
};
// -------------------------------------------------------------------

class PbTick : public ::google::protobuf::Message {
 public:
  PbTick();
  virtual ~PbTick();

  PbTick(const PbTick& from);

  inline PbTick& operator=(const PbTick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbTick& default_instance();

  void Swap(PbTick* other);

  // implements Message ----------------------------------------------

  inline PbTick* New() const { return New(NULL); }

  PbTick* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbTick& from);
  void MergeFrom(const PbTick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PbTick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QuantBox.Data.Serializer.V2.ConfigInfo Config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline const ::QuantBox::Data::Serializer::V2::ConfigInfo& config() const;
  inline ::QuantBox::Data::Serializer::V2::ConfigInfo* mutable_config();
  inline ::QuantBox::Data::Serializer::V2::ConfigInfo* release_config();
  inline void set_allocated_config(::QuantBox::Data::Serializer::V2::ConfigInfo* config);

  // optional sint32 TradingDay = 2 [default = 0];
  inline bool has_tradingday() const;
  inline void clear_tradingday();
  static const int kTradingDayFieldNumber = 2;
  inline ::google::protobuf::int32 tradingday() const;
  inline void set_tradingday(::google::protobuf::int32 value);

  // optional sint32 ActionDay = 3 [default = 0];
  inline bool has_actionday() const;
  inline void clear_actionday();
  static const int kActionDayFieldNumber = 3;
  inline ::google::protobuf::int32 actionday() const;
  inline void set_actionday(::google::protobuf::int32 value);

  // optional sint32 Time_HHmm = 4 [default = 0];
  inline bool has_time_hhmm() const;
  inline void clear_time_hhmm();
  static const int kTimeHHmmFieldNumber = 4;
  inline ::google::protobuf::int32 time_hhmm() const;
  inline void set_time_hhmm(::google::protobuf::int32 value);

  // optional sint32 Time_____ssf__ = 5 [default = 0];
  inline bool has_time_____ssf__() const;
  inline void clear_time_____ssf__();
  static const int kTimeSsfFieldNumber = 5;
  inline ::google::protobuf::int32 time_____ssf__() const;
  inline void set_time_____ssf__(::google::protobuf::int32 value);

  // optional sint32 Time________ff = 6 [default = 0];
  inline bool has_time________ff() const;
  inline void clear_time________ff();
  static const int kTimeFfFieldNumber = 6;
  inline ::google::protobuf::int32 time________ff() const;
  inline void set_time________ff(::google::protobuf::int32 value);

  // optional sint32 LastPrice = 7 [default = 0];
  inline bool has_lastprice() const;
  inline void clear_lastprice();
  static const int kLastPriceFieldNumber = 7;
  inline ::google::protobuf::int32 lastprice() const;
  inline void set_lastprice(::google::protobuf::int32 value);

  // optional sint32 AskPrice1 = 8 [default = 0];
  inline bool has_askprice1() const;
  inline void clear_askprice1();
  static const int kAskPrice1FieldNumber = 8;
  inline ::google::protobuf::int32 askprice1() const;
  inline void set_askprice1(::google::protobuf::int32 value);

  // optional .QuantBox.Data.Serializer.V2.DepthTick Depth = 9;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 9;
  inline const ::QuantBox::Data::Serializer::V2::DepthTick& depth() const;
  inline ::QuantBox::Data::Serializer::V2::DepthTick* mutable_depth();
  inline ::QuantBox::Data::Serializer::V2::DepthTick* release_depth();
  inline void set_allocated_depth(::QuantBox::Data::Serializer::V2::DepthTick* depth);

  // optional sint64 Volume = 10 [default = 0];
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 10;
  inline ::google::protobuf::int64 volume() const;
  inline void set_volume(::google::protobuf::int64 value);

  // optional sint64 OpenInterest = 11 [default = 0];
  inline bool has_openinterest() const;
  inline void clear_openinterest();
  static const int kOpenInterestFieldNumber = 11;
  inline ::google::protobuf::int64 openinterest() const;
  inline void set_openinterest(::google::protobuf::int64 value);

  // optional sint64 Turnover = 12 [default = 0];
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 12;
  inline ::google::protobuf::int64 turnover() const;
  inline void set_turnover(::google::protobuf::int64 value);

  // optional sint32 AveragePrice = 13 [default = 0];
  inline bool has_averageprice() const;
  inline void clear_averageprice();
  static const int kAveragePriceFieldNumber = 13;
  inline ::google::protobuf::int32 averageprice() const;
  inline void set_averageprice(::google::protobuf::int32 value);

  // optional .QuantBox.Data.Serializer.V2.BarInfo Bar = 14;
  inline bool has_bar() const;
  inline void clear_bar();
  static const int kBarFieldNumber = 14;
  inline const ::QuantBox::Data::Serializer::V2::BarInfo& bar() const;
  inline ::QuantBox::Data::Serializer::V2::BarInfo* mutable_bar();
  inline ::QuantBox::Data::Serializer::V2::BarInfo* release_bar();
  inline void set_allocated_bar(::QuantBox::Data::Serializer::V2::BarInfo* bar);

  // optional .QuantBox.Data.Serializer.V2.StaticInfo Static = 15;
  inline bool has_static_() const;
  inline void clear_static_();
  static const int kStaticFieldNumber = 15;
  inline const ::QuantBox::Data::Serializer::V2::StaticInfo& static_() const;
  inline ::QuantBox::Data::Serializer::V2::StaticInfo* mutable_static_();
  inline ::QuantBox::Data::Serializer::V2::StaticInfo* release_static_();
  inline void set_allocated_static_(::QuantBox::Data::Serializer::V2::StaticInfo* static_);

  // optional .QuantBox.Data.Serializer.V2.StockSplitInfo Split = 16;
  inline bool has_split() const;
  inline void clear_split();
  static const int kSplitFieldNumber = 16;
  inline const ::QuantBox::Data::Serializer::V2::StockSplitInfo& split() const;
  inline ::QuantBox::Data::Serializer::V2::StockSplitInfo* mutable_split();
  inline ::QuantBox::Data::Serializer::V2::StockSplitInfo* release_split();
  inline void set_allocated_split(::QuantBox::Data::Serializer::V2::StockSplitInfo* split);

  // optional sint32 LocalTime_Msec = 17 [default = 0];
  inline bool has_localtime_msec() const;
  inline void clear_localtime_msec();
  static const int kLocalTimeMsecFieldNumber = 17;
  inline ::google::protobuf::int32 localtime_msec() const;
  inline void set_localtime_msec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QuantBox.Data.Serializer.V2.PbTick)
 private:
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_tradingday();
  inline void clear_has_tradingday();
  inline void set_has_actionday();
  inline void clear_has_actionday();
  inline void set_has_time_hhmm();
  inline void clear_has_time_hhmm();
  inline void set_has_time_____ssf__();
  inline void clear_has_time_____ssf__();
  inline void set_has_time________ff();
  inline void clear_has_time________ff();
  inline void set_has_lastprice();
  inline void clear_has_lastprice();
  inline void set_has_askprice1();
  inline void clear_has_askprice1();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_openinterest();
  inline void clear_has_openinterest();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_averageprice();
  inline void clear_has_averageprice();
  inline void set_has_bar();
  inline void clear_has_bar();
  inline void set_has_static_();
  inline void clear_has_static_();
  inline void set_has_split();
  inline void clear_has_split();
  inline void set_has_localtime_msec();
  inline void clear_has_localtime_msec();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::QuantBox::Data::Serializer::V2::ConfigInfo* config_;
  ::google::protobuf::int32 tradingday_;
  ::google::protobuf::int32 actionday_;
  ::google::protobuf::int32 time_hhmm_;
  ::google::protobuf::int32 time_____ssf___;
  ::google::protobuf::int32 time________ff_;
  ::google::protobuf::int32 lastprice_;
  ::QuantBox::Data::Serializer::V2::DepthTick* depth_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int32 askprice1_;
  ::google::protobuf::int32 averageprice_;
  ::google::protobuf::int64 openinterest_;
  ::google::protobuf::int64 turnover_;
  ::QuantBox::Data::Serializer::V2::BarInfo* bar_;
  ::QuantBox::Data::Serializer::V2::StaticInfo* static__;
  ::QuantBox::Data::Serializer::V2::StockSplitInfo* split_;
  ::google::protobuf::int32 localtime_msec_;
  friend void  protobuf_AddDesc_PbTick_2eproto();
  friend void protobuf_AssignDesc_PbTick_2eproto();
  friend void protobuf_ShutdownFile_PbTick_2eproto();

  void InitAsDefaultInstance();
  static PbTick* default_instance_;
};
// -------------------------------------------------------------------

class StaticInfo : public ::google::protobuf::Message {
 public:
  StaticInfo();
  virtual ~StaticInfo();

  StaticInfo(const StaticInfo& from);

  inline StaticInfo& operator=(const StaticInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticInfo& default_instance();

  void Swap(StaticInfo* other);

  // implements Message ----------------------------------------------

  inline StaticInfo* New() const { return New(NULL); }

  StaticInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StaticInfo& from);
  void MergeFrom(const StaticInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StaticInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 LowerLimitPrice = 1 [default = 0];
  inline bool has_lowerlimitprice() const;
  inline void clear_lowerlimitprice();
  static const int kLowerLimitPriceFieldNumber = 1;
  inline ::google::protobuf::int32 lowerlimitprice() const;
  inline void set_lowerlimitprice(::google::protobuf::int32 value);

  // optional sint32 UpperLimitPrice = 2 [default = 0];
  inline bool has_upperlimitprice() const;
  inline void clear_upperlimitprice();
  static const int kUpperLimitPriceFieldNumber = 2;
  inline ::google::protobuf::int32 upperlimitprice() const;
  inline void set_upperlimitprice(::google::protobuf::int32 value);

  // optional sint32 SettlementPrice = 3 [default = 0];
  inline bool has_settlementprice() const;
  inline void clear_settlementprice();
  static const int kSettlementPriceFieldNumber = 3;
  inline ::google::protobuf::int32 settlementprice() const;
  inline void set_settlementprice(::google::protobuf::int32 value);

  // optional string Symbol = 4;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 4;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional string Exchange = 5;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 5;
  inline const ::std::string& exchange() const;
  inline void set_exchange(const ::std::string& value);
  inline void set_exchange(const char* value);
  inline void set_exchange(const char* value, size_t size);
  inline ::std::string* mutable_exchange();
  inline ::std::string* release_exchange();
  inline void set_allocated_exchange(::std::string* exchange);

  // @@protoc_insertion_point(class_scope:QuantBox.Data.Serializer.V2.StaticInfo)
 private:
  inline void set_has_lowerlimitprice();
  inline void clear_has_lowerlimitprice();
  inline void set_has_upperlimitprice();
  inline void clear_has_upperlimitprice();
  inline void set_has_settlementprice();
  inline void clear_has_settlementprice();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_exchange();
  inline void clear_has_exchange();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 lowerlimitprice_;
  ::google::protobuf::int32 upperlimitprice_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int32 settlementprice_;
  friend void  protobuf_AddDesc_PbTick_2eproto();
  friend void protobuf_AssignDesc_PbTick_2eproto();
  friend void protobuf_ShutdownFile_PbTick_2eproto();

  void InitAsDefaultInstance();
  static StaticInfo* default_instance_;
};
// -------------------------------------------------------------------

class StockSplitInfo : public ::google::protobuf::Message {
 public:
  StockSplitInfo();
  virtual ~StockSplitInfo();

  StockSplitInfo(const StockSplitInfo& from);

  inline StockSplitInfo& operator=(const StockSplitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockSplitInfo& default_instance();

  void Swap(StockSplitInfo* other);

  // implements Message ----------------------------------------------

  inline StockSplitInfo* New() const { return New(NULL); }

  StockSplitInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockSplitInfo& from);
  void MergeFrom(const StockSplitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockSplitInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double CashDividend = 1 [default = 0];
  inline bool has_cashdividend() const;
  inline void clear_cashdividend();
  static const int kCashDividendFieldNumber = 1;
  inline double cashdividend() const;
  inline void set_cashdividend(double value);

  // optional double StockDividend = 2 [default = 0];
  inline bool has_stockdividend() const;
  inline void clear_stockdividend();
  static const int kStockDividendFieldNumber = 2;
  inline double stockdividend() const;
  inline void set_stockdividend(double value);

  // optional double RightsOffering = 3 [default = 0];
  inline bool has_rightsoffering() const;
  inline void clear_rightsoffering();
  static const int kRightsOfferingFieldNumber = 3;
  inline double rightsoffering() const;
  inline void set_rightsoffering(double value);

  // optional double RightsOfferingPrice = 4 [default = 0];
  inline bool has_rightsofferingprice() const;
  inline void clear_rightsofferingprice();
  static const int kRightsOfferingPriceFieldNumber = 4;
  inline double rightsofferingprice() const;
  inline void set_rightsofferingprice(double value);

  // optional double PreClose = 5 [default = 0];
  inline bool has_preclose() const;
  inline void clear_preclose();
  static const int kPreCloseFieldNumber = 5;
  inline double preclose() const;
  inline void set_preclose(double value);

  // @@protoc_insertion_point(class_scope:QuantBox.Data.Serializer.V2.StockSplitInfo)
 private:
  inline void set_has_cashdividend();
  inline void clear_has_cashdividend();
  inline void set_has_stockdividend();
  inline void clear_has_stockdividend();
  inline void set_has_rightsoffering();
  inline void clear_has_rightsoffering();
  inline void set_has_rightsofferingprice();
  inline void clear_has_rightsofferingprice();
  inline void set_has_preclose();
  inline void clear_has_preclose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double cashdividend_;
  double stockdividend_;
  double rightsoffering_;
  double rightsofferingprice_;
  double preclose_;
  friend void  protobuf_AddDesc_PbTick_2eproto();
  friend void protobuf_AssignDesc_PbTick_2eproto();
  friend void protobuf_ShutdownFile_PbTick_2eproto();

  void InitAsDefaultInstance();
  static StockSplitInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// BarInfo

// optional sint32 Open = 1 [default = 0];
inline bool BarInfo::has_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BarInfo::set_has_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BarInfo::clear_has_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BarInfo::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 BarInfo::open() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.BarInfo.Open)
  return open_;
}
inline void BarInfo::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.BarInfo.Open)
}

// optional sint32 High = 2 [default = 0];
inline bool BarInfo::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BarInfo::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BarInfo::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BarInfo::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline ::google::protobuf::int32 BarInfo::high() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.BarInfo.High)
  return high_;
}
inline void BarInfo::set_high(::google::protobuf::int32 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.BarInfo.High)
}

// optional sint32 Low = 3 [default = 0];
inline bool BarInfo::has_low() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BarInfo::set_has_low() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BarInfo::clear_has_low() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BarInfo::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline ::google::protobuf::int32 BarInfo::low() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.BarInfo.Low)
  return low_;
}
inline void BarInfo::set_low(::google::protobuf::int32 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.BarInfo.Low)
}

// optional sint32 Close = 4 [default = 0];
inline bool BarInfo::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BarInfo::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BarInfo::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BarInfo::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline ::google::protobuf::int32 BarInfo::close() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.BarInfo.Close)
  return close_;
}
inline void BarInfo::set_close(::google::protobuf::int32 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.BarInfo.Close)
}

// optional sint32 BarSize = 5 [default = 0];
inline bool BarInfo::has_barsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BarInfo::set_has_barsize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BarInfo::clear_has_barsize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BarInfo::clear_barsize() {
  barsize_ = 0;
  clear_has_barsize();
}
inline ::google::protobuf::int32 BarInfo::barsize() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.BarInfo.BarSize)
  return barsize_;
}
inline void BarInfo::set_barsize(::google::protobuf::int32 value) {
  set_has_barsize();
  barsize_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.BarInfo.BarSize)
}

// -------------------------------------------------------------------

// ConfigInfo

// optional int32 Version = 1 [default = 0];
inline bool ConfigInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigInfo::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 ConfigInfo::version() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.Version)
  return version_;
}
inline void ConfigInfo::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.Version)
}

// optional int32 TickSize = 2 [default = 0];
inline bool ConfigInfo::has_ticksize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigInfo::set_has_ticksize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigInfo::clear_has_ticksize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigInfo::clear_ticksize() {
  ticksize_ = 0;
  clear_has_ticksize();
}
inline ::google::protobuf::int32 ConfigInfo::ticksize() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.TickSize)
  return ticksize_;
}
inline void ConfigInfo::set_ticksize(::google::protobuf::int32 value) {
  set_has_ticksize();
  ticksize_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.TickSize)
}

// optional double TickSizeMultiplier = 3 [default = 0];
inline bool ConfigInfo::has_ticksizemultiplier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigInfo::set_has_ticksizemultiplier() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigInfo::clear_has_ticksizemultiplier() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigInfo::clear_ticksizemultiplier() {
  ticksizemultiplier_ = 0;
  clear_has_ticksizemultiplier();
}
inline double ConfigInfo::ticksizemultiplier() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.TickSizeMultiplier)
  return ticksizemultiplier_;
}
inline void ConfigInfo::set_ticksizemultiplier(double value) {
  set_has_ticksizemultiplier();
  ticksizemultiplier_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.TickSizeMultiplier)
}

// optional int32 SettlementPriceMultiplier = 4 [default = 0];
inline bool ConfigInfo::has_settlementpricemultiplier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigInfo::set_has_settlementpricemultiplier() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigInfo::clear_has_settlementpricemultiplier() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigInfo::clear_settlementpricemultiplier() {
  settlementpricemultiplier_ = 0;
  clear_has_settlementpricemultiplier();
}
inline ::google::protobuf::int32 ConfigInfo::settlementpricemultiplier() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.SettlementPriceMultiplier)
  return settlementpricemultiplier_;
}
inline void ConfigInfo::set_settlementpricemultiplier(::google::protobuf::int32 value) {
  set_has_settlementpricemultiplier();
  settlementpricemultiplier_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.SettlementPriceMultiplier)
}

// optional int32 AveragePriceMultiplier = 5 [default = 0];
inline bool ConfigInfo::has_averagepricemultiplier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigInfo::set_has_averagepricemultiplier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigInfo::clear_has_averagepricemultiplier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigInfo::clear_averagepricemultiplier() {
  averagepricemultiplier_ = 0;
  clear_has_averagepricemultiplier();
}
inline ::google::protobuf::int32 ConfigInfo::averagepricemultiplier() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.AveragePriceMultiplier)
  return averagepricemultiplier_;
}
inline void ConfigInfo::set_averagepricemultiplier(::google::protobuf::int32 value) {
  set_has_averagepricemultiplier();
  averagepricemultiplier_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.AveragePriceMultiplier)
}

// optional double ContractMultiplier = 6 [default = 0];
inline bool ConfigInfo::has_contractmultiplier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigInfo::set_has_contractmultiplier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigInfo::clear_has_contractmultiplier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigInfo::clear_contractmultiplier() {
  contractmultiplier_ = 0;
  clear_has_contractmultiplier();
}
inline double ConfigInfo::contractmultiplier() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.ContractMultiplier)
  return contractmultiplier_;
}
inline void ConfigInfo::set_contractmultiplier(double value) {
  set_has_contractmultiplier();
  contractmultiplier_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.ContractMultiplier)
}

// optional int32 Time_ssf_Diff = 7 [default = 0];
inline bool ConfigInfo::has_time_ssf_diff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigInfo::set_has_time_ssf_diff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigInfo::clear_has_time_ssf_diff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigInfo::clear_time_ssf_diff() {
  time_ssf_diff_ = 0;
  clear_has_time_ssf_diff();
}
inline ::google::protobuf::int32 ConfigInfo::time_ssf_diff() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.Time_ssf_Diff)
  return time_ssf_diff_;
}
inline void ConfigInfo::set_time_ssf_diff(::google::protobuf::int32 value) {
  set_has_time_ssf_diff();
  time_ssf_diff_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.Time_ssf_Diff)
}

// optional int32 MarketDepth = 8 [default = 0];
inline bool ConfigInfo::has_marketdepth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigInfo::set_has_marketdepth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigInfo::clear_has_marketdepth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigInfo::clear_marketdepth() {
  marketdepth_ = 0;
  clear_has_marketdepth();
}
inline ::google::protobuf::int32 ConfigInfo::marketdepth() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.MarketDepth)
  return marketdepth_;
}
inline void ConfigInfo::set_marketdepth(::google::protobuf::int32 value) {
  set_has_marketdepth();
  marketdepth_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.MarketDepth)
}

// optional int32 MarketType = 9 [default = 0];
inline bool ConfigInfo::has_markettype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigInfo::set_has_markettype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigInfo::clear_has_markettype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigInfo::clear_markettype() {
  markettype_ = 0;
  clear_has_markettype();
}
inline ::google::protobuf::int32 ConfigInfo::markettype() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.MarketType)
  return markettype_;
}
inline void ConfigInfo::set_markettype(::google::protobuf::int32 value) {
  set_has_markettype();
  markettype_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.MarketType)
}

// optional int32 Volume_Total_Or_Increment = 10 [default = 0];
inline bool ConfigInfo::has_volume_total_or_increment() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigInfo::set_has_volume_total_or_increment() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigInfo::clear_has_volume_total_or_increment() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigInfo::clear_volume_total_or_increment() {
  volume_total_or_increment_ = 0;
  clear_has_volume_total_or_increment();
}
inline ::google::protobuf::int32 ConfigInfo::volume_total_or_increment() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.Volume_Total_Or_Increment)
  return volume_total_or_increment_;
}
inline void ConfigInfo::set_volume_total_or_increment(::google::protobuf::int32 value) {
  set_has_volume_total_or_increment();
  volume_total_or_increment_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.Volume_Total_Or_Increment)
}

// optional int32 Turnover_Total_Or_Increment = 11 [default = 0];
inline bool ConfigInfo::has_turnover_total_or_increment() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigInfo::set_has_turnover_total_or_increment() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigInfo::clear_has_turnover_total_or_increment() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigInfo::clear_turnover_total_or_increment() {
  turnover_total_or_increment_ = 0;
  clear_has_turnover_total_or_increment();
}
inline ::google::protobuf::int32 ConfigInfo::turnover_total_or_increment() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.ConfigInfo.Turnover_Total_Or_Increment)
  return turnover_total_or_increment_;
}
inline void ConfigInfo::set_turnover_total_or_increment(::google::protobuf::int32 value) {
  set_has_turnover_total_or_increment();
  turnover_total_or_increment_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.ConfigInfo.Turnover_Total_Or_Increment)
}

// -------------------------------------------------------------------

// DepthTick

// optional sint32 Value1 = 1 [default = 0];
inline bool DepthTick::has_value1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepthTick::set_has_value1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepthTick::clear_has_value1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepthTick::clear_value1() {
  value1_ = 0;
  clear_has_value1();
}
inline ::google::protobuf::int32 DepthTick::value1() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value1)
  return value1_;
}
inline void DepthTick::set_value1(::google::protobuf::int32 value) {
  set_has_value1();
  value1_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value1)
}

// optional sint32 Value2 = 2 [default = 0];
inline bool DepthTick::has_value2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepthTick::set_has_value2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepthTick::clear_has_value2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepthTick::clear_value2() {
  value2_ = 0;
  clear_has_value2();
}
inline ::google::protobuf::int32 DepthTick::value2() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value2)
  return value2_;
}
inline void DepthTick::set_value2(::google::protobuf::int32 value) {
  set_has_value2();
  value2_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value2)
}

// optional sint32 Value3 = 3 [default = 0];
inline bool DepthTick::has_value3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DepthTick::set_has_value3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DepthTick::clear_has_value3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DepthTick::clear_value3() {
  value3_ = 0;
  clear_has_value3();
}
inline ::google::protobuf::int32 DepthTick::value3() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value3)
  return value3_;
}
inline void DepthTick::set_value3(::google::protobuf::int32 value) {
  set_has_value3();
  value3_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value3)
}

// optional sint32 Value4 = 4 [default = 0];
inline bool DepthTick::has_value4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DepthTick::set_has_value4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DepthTick::clear_has_value4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DepthTick::clear_value4() {
  value4_ = 0;
  clear_has_value4();
}
inline ::google::protobuf::int32 DepthTick::value4() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value4)
  return value4_;
}
inline void DepthTick::set_value4(::google::protobuf::int32 value) {
  set_has_value4();
  value4_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value4)
}

// optional sint32 Value5 = 5 [default = 0];
inline bool DepthTick::has_value5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DepthTick::set_has_value5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DepthTick::clear_has_value5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DepthTick::clear_value5() {
  value5_ = 0;
  clear_has_value5();
}
inline ::google::protobuf::int32 DepthTick::value5() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value5)
  return value5_;
}
inline void DepthTick::set_value5(::google::protobuf::int32 value) {
  set_has_value5();
  value5_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value5)
}

// optional sint32 Value6 = 6 [default = 0];
inline bool DepthTick::has_value6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DepthTick::set_has_value6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DepthTick::clear_has_value6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DepthTick::clear_value6() {
  value6_ = 0;
  clear_has_value6();
}
inline ::google::protobuf::int32 DepthTick::value6() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value6)
  return value6_;
}
inline void DepthTick::set_value6(::google::protobuf::int32 value) {
  set_has_value6();
  value6_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value6)
}

// optional sint32 Value7 = 7 [default = 0];
inline bool DepthTick::has_value7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DepthTick::set_has_value7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DepthTick::clear_has_value7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DepthTick::clear_value7() {
  value7_ = 0;
  clear_has_value7();
}
inline ::google::protobuf::int32 DepthTick::value7() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value7)
  return value7_;
}
inline void DepthTick::set_value7(::google::protobuf::int32 value) {
  set_has_value7();
  value7_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value7)
}

// optional sint32 Value8 = 8 [default = 0];
inline bool DepthTick::has_value8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DepthTick::set_has_value8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DepthTick::clear_has_value8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DepthTick::clear_value8() {
  value8_ = 0;
  clear_has_value8();
}
inline ::google::protobuf::int32 DepthTick::value8() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value8)
  return value8_;
}
inline void DepthTick::set_value8(::google::protobuf::int32 value) {
  set_has_value8();
  value8_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value8)
}

// optional sint32 Value9 = 9 [default = 0];
inline bool DepthTick::has_value9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DepthTick::set_has_value9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DepthTick::clear_has_value9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DepthTick::clear_value9() {
  value9_ = 0;
  clear_has_value9();
}
inline ::google::protobuf::int32 DepthTick::value9() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value9)
  return value9_;
}
inline void DepthTick::set_value9(::google::protobuf::int32 value) {
  set_has_value9();
  value9_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value9)
}

// optional sint32 Value10 = 10 [default = 0];
inline bool DepthTick::has_value10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DepthTick::set_has_value10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DepthTick::clear_has_value10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DepthTick::clear_value10() {
  value10_ = 0;
  clear_has_value10();
}
inline ::google::protobuf::int32 DepthTick::value10() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value10)
  return value10_;
}
inline void DepthTick::set_value10(::google::protobuf::int32 value) {
  set_has_value10();
  value10_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value10)
}

// optional sint32 Value11 = 11 [default = 0];
inline bool DepthTick::has_value11() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DepthTick::set_has_value11() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DepthTick::clear_has_value11() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DepthTick::clear_value11() {
  value11_ = 0;
  clear_has_value11();
}
inline ::google::protobuf::int32 DepthTick::value11() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value11)
  return value11_;
}
inline void DepthTick::set_value11(::google::protobuf::int32 value) {
  set_has_value11();
  value11_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value11)
}

// optional sint32 Value12 = 12 [default = 0];
inline bool DepthTick::has_value12() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DepthTick::set_has_value12() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DepthTick::clear_has_value12() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DepthTick::clear_value12() {
  value12_ = 0;
  clear_has_value12();
}
inline ::google::protobuf::int32 DepthTick::value12() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value12)
  return value12_;
}
inline void DepthTick::set_value12(::google::protobuf::int32 value) {
  set_has_value12();
  value12_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value12)
}

// optional sint32 Value13 = 13 [default = 0];
inline bool DepthTick::has_value13() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DepthTick::set_has_value13() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DepthTick::clear_has_value13() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DepthTick::clear_value13() {
  value13_ = 0;
  clear_has_value13();
}
inline ::google::protobuf::int32 DepthTick::value13() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value13)
  return value13_;
}
inline void DepthTick::set_value13(::google::protobuf::int32 value) {
  set_has_value13();
  value13_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value13)
}

// optional sint32 Value14 = 14 [default = 0];
inline bool DepthTick::has_value14() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DepthTick::set_has_value14() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DepthTick::clear_has_value14() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DepthTick::clear_value14() {
  value14_ = 0;
  clear_has_value14();
}
inline ::google::protobuf::int32 DepthTick::value14() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Value14)
  return value14_;
}
inline void DepthTick::set_value14(::google::protobuf::int32 value) {
  set_has_value14();
  value14_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.DepthTick.Value14)
}

// optional .QuantBox.Data.Serializer.V2.DepthTick Next = 15;
inline bool DepthTick::has_next() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DepthTick::set_has_next() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DepthTick::clear_has_next() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DepthTick::clear_next() {
  if (next_ != NULL) next_->::QuantBox::Data::Serializer::V2::DepthTick::Clear();
  clear_has_next();
}
inline const ::QuantBox::Data::Serializer::V2::DepthTick& DepthTick::next() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.DepthTick.Next)
  return next_ != NULL ? *next_ : *default_instance_->next_;
}
inline ::QuantBox::Data::Serializer::V2::DepthTick* DepthTick::mutable_next() {
  set_has_next();
  if (next_ == NULL) {
    next_ = new ::QuantBox::Data::Serializer::V2::DepthTick;
  }
  // @@protoc_insertion_point(field_mutable:QuantBox.Data.Serializer.V2.DepthTick.Next)
  return next_;
}
inline ::QuantBox::Data::Serializer::V2::DepthTick* DepthTick::release_next() {
  clear_has_next();
  ::QuantBox::Data::Serializer::V2::DepthTick* temp = next_;
  next_ = NULL;
  return temp;
}
inline void DepthTick::set_allocated_next(::QuantBox::Data::Serializer::V2::DepthTick* next) {
  delete next_;
  next_ = next;
  if (next) {
    set_has_next();
  } else {
    clear_has_next();
  }
  // @@protoc_insertion_point(field_set_allocated:QuantBox.Data.Serializer.V2.DepthTick.Next)
}

// -------------------------------------------------------------------

// PbTick

// optional .QuantBox.Data.Serializer.V2.ConfigInfo Config = 1;
inline bool PbTick::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbTick::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbTick::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbTick::clear_config() {
  if (config_ != NULL) config_->::QuantBox::Data::Serializer::V2::ConfigInfo::Clear();
  clear_has_config();
}
inline const ::QuantBox::Data::Serializer::V2::ConfigInfo& PbTick::config() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::QuantBox::Data::Serializer::V2::ConfigInfo* PbTick::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::QuantBox::Data::Serializer::V2::ConfigInfo;
  }
  // @@protoc_insertion_point(field_mutable:QuantBox.Data.Serializer.V2.PbTick.Config)
  return config_;
}
inline ::QuantBox::Data::Serializer::V2::ConfigInfo* PbTick::release_config() {
  clear_has_config();
  ::QuantBox::Data::Serializer::V2::ConfigInfo* temp = config_;
  config_ = NULL;
  return temp;
}
inline void PbTick::set_allocated_config(::QuantBox::Data::Serializer::V2::ConfigInfo* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:QuantBox.Data.Serializer.V2.PbTick.Config)
}

// optional sint32 TradingDay = 2 [default = 0];
inline bool PbTick::has_tradingday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbTick::set_has_tradingday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbTick::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbTick::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
inline ::google::protobuf::int32 PbTick::tradingday() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.TradingDay)
  return tradingday_;
}
inline void PbTick::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.TradingDay)
}

// optional sint32 ActionDay = 3 [default = 0];
inline bool PbTick::has_actionday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbTick::set_has_actionday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbTick::clear_has_actionday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbTick::clear_actionday() {
  actionday_ = 0;
  clear_has_actionday();
}
inline ::google::protobuf::int32 PbTick::actionday() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.ActionDay)
  return actionday_;
}
inline void PbTick::set_actionday(::google::protobuf::int32 value) {
  set_has_actionday();
  actionday_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.ActionDay)
}

// optional sint32 Time_HHmm = 4 [default = 0];
inline bool PbTick::has_time_hhmm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbTick::set_has_time_hhmm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbTick::clear_has_time_hhmm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbTick::clear_time_hhmm() {
  time_hhmm_ = 0;
  clear_has_time_hhmm();
}
inline ::google::protobuf::int32 PbTick::time_hhmm() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Time_HHmm)
  return time_hhmm_;
}
inline void PbTick::set_time_hhmm(::google::protobuf::int32 value) {
  set_has_time_hhmm();
  time_hhmm_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.Time_HHmm)
}

// optional sint32 Time_____ssf__ = 5 [default = 0];
inline bool PbTick::has_time_____ssf__() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbTick::set_has_time_____ssf__() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbTick::clear_has_time_____ssf__() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbTick::clear_time_____ssf__() {
  time_____ssf___ = 0;
  clear_has_time_____ssf__();
}
inline ::google::protobuf::int32 PbTick::time_____ssf__() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Time_____ssf__)
  return time_____ssf___;
}
inline void PbTick::set_time_____ssf__(::google::protobuf::int32 value) {
  set_has_time_____ssf__();
  time_____ssf___ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.Time_____ssf__)
}

// optional sint32 Time________ff = 6 [default = 0];
inline bool PbTick::has_time________ff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbTick::set_has_time________ff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbTick::clear_has_time________ff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbTick::clear_time________ff() {
  time________ff_ = 0;
  clear_has_time________ff();
}
inline ::google::protobuf::int32 PbTick::time________ff() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Time________ff)
  return time________ff_;
}
inline void PbTick::set_time________ff(::google::protobuf::int32 value) {
  set_has_time________ff();
  time________ff_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.Time________ff)
}

// optional sint32 LastPrice = 7 [default = 0];
inline bool PbTick::has_lastprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbTick::set_has_lastprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbTick::clear_has_lastprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbTick::clear_lastprice() {
  lastprice_ = 0;
  clear_has_lastprice();
}
inline ::google::protobuf::int32 PbTick::lastprice() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.LastPrice)
  return lastprice_;
}
inline void PbTick::set_lastprice(::google::protobuf::int32 value) {
  set_has_lastprice();
  lastprice_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.LastPrice)
}

// optional sint32 AskPrice1 = 8 [default = 0];
inline bool PbTick::has_askprice1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PbTick::set_has_askprice1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PbTick::clear_has_askprice1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PbTick::clear_askprice1() {
  askprice1_ = 0;
  clear_has_askprice1();
}
inline ::google::protobuf::int32 PbTick::askprice1() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.AskPrice1)
  return askprice1_;
}
inline void PbTick::set_askprice1(::google::protobuf::int32 value) {
  set_has_askprice1();
  askprice1_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.AskPrice1)
}

// optional .QuantBox.Data.Serializer.V2.DepthTick Depth = 9;
inline bool PbTick::has_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PbTick::set_has_depth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PbTick::clear_has_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PbTick::clear_depth() {
  if (depth_ != NULL) depth_->::QuantBox::Data::Serializer::V2::DepthTick::Clear();
  clear_has_depth();
}
inline const ::QuantBox::Data::Serializer::V2::DepthTick& PbTick::depth() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Depth)
  return depth_ != NULL ? *depth_ : *default_instance_->depth_;
}
inline ::QuantBox::Data::Serializer::V2::DepthTick* PbTick::mutable_depth() {
  set_has_depth();
  if (depth_ == NULL) {
    depth_ = new ::QuantBox::Data::Serializer::V2::DepthTick;
  }
  // @@protoc_insertion_point(field_mutable:QuantBox.Data.Serializer.V2.PbTick.Depth)
  return depth_;
}
inline ::QuantBox::Data::Serializer::V2::DepthTick* PbTick::release_depth() {
  clear_has_depth();
  ::QuantBox::Data::Serializer::V2::DepthTick* temp = depth_;
  depth_ = NULL;
  return temp;
}
inline void PbTick::set_allocated_depth(::QuantBox::Data::Serializer::V2::DepthTick* depth) {
  delete depth_;
  depth_ = depth;
  if (depth) {
    set_has_depth();
  } else {
    clear_has_depth();
  }
  // @@protoc_insertion_point(field_set_allocated:QuantBox.Data.Serializer.V2.PbTick.Depth)
}

// optional sint64 Volume = 10 [default = 0];
inline bool PbTick::has_volume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PbTick::set_has_volume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PbTick::clear_has_volume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PbTick::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 PbTick::volume() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Volume)
  return volume_;
}
inline void PbTick::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.Volume)
}

// optional sint64 OpenInterest = 11 [default = 0];
inline bool PbTick::has_openinterest() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PbTick::set_has_openinterest() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PbTick::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PbTick::clear_openinterest() {
  openinterest_ = GOOGLE_LONGLONG(0);
  clear_has_openinterest();
}
inline ::google::protobuf::int64 PbTick::openinterest() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.OpenInterest)
  return openinterest_;
}
inline void PbTick::set_openinterest(::google::protobuf::int64 value) {
  set_has_openinterest();
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.OpenInterest)
}

// optional sint64 Turnover = 12 [default = 0];
inline bool PbTick::has_turnover() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PbTick::set_has_turnover() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PbTick::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PbTick::clear_turnover() {
  turnover_ = GOOGLE_LONGLONG(0);
  clear_has_turnover();
}
inline ::google::protobuf::int64 PbTick::turnover() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Turnover)
  return turnover_;
}
inline void PbTick::set_turnover(::google::protobuf::int64 value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.Turnover)
}

// optional sint32 AveragePrice = 13 [default = 0];
inline bool PbTick::has_averageprice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PbTick::set_has_averageprice() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PbTick::clear_has_averageprice() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PbTick::clear_averageprice() {
  averageprice_ = 0;
  clear_has_averageprice();
}
inline ::google::protobuf::int32 PbTick::averageprice() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.AveragePrice)
  return averageprice_;
}
inline void PbTick::set_averageprice(::google::protobuf::int32 value) {
  set_has_averageprice();
  averageprice_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.AveragePrice)
}

// optional .QuantBox.Data.Serializer.V2.BarInfo Bar = 14;
inline bool PbTick::has_bar() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PbTick::set_has_bar() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PbTick::clear_has_bar() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PbTick::clear_bar() {
  if (bar_ != NULL) bar_->::QuantBox::Data::Serializer::V2::BarInfo::Clear();
  clear_has_bar();
}
inline const ::QuantBox::Data::Serializer::V2::BarInfo& PbTick::bar() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Bar)
  return bar_ != NULL ? *bar_ : *default_instance_->bar_;
}
inline ::QuantBox::Data::Serializer::V2::BarInfo* PbTick::mutable_bar() {
  set_has_bar();
  if (bar_ == NULL) {
    bar_ = new ::QuantBox::Data::Serializer::V2::BarInfo;
  }
  // @@protoc_insertion_point(field_mutable:QuantBox.Data.Serializer.V2.PbTick.Bar)
  return bar_;
}
inline ::QuantBox::Data::Serializer::V2::BarInfo* PbTick::release_bar() {
  clear_has_bar();
  ::QuantBox::Data::Serializer::V2::BarInfo* temp = bar_;
  bar_ = NULL;
  return temp;
}
inline void PbTick::set_allocated_bar(::QuantBox::Data::Serializer::V2::BarInfo* bar) {
  delete bar_;
  bar_ = bar;
  if (bar) {
    set_has_bar();
  } else {
    clear_has_bar();
  }
  // @@protoc_insertion_point(field_set_allocated:QuantBox.Data.Serializer.V2.PbTick.Bar)
}

// optional .QuantBox.Data.Serializer.V2.StaticInfo Static = 15;
inline bool PbTick::has_static_() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PbTick::set_has_static_() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PbTick::clear_has_static_() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PbTick::clear_static_() {
  if (static__ != NULL) static__->::QuantBox::Data::Serializer::V2::StaticInfo::Clear();
  clear_has_static_();
}
inline const ::QuantBox::Data::Serializer::V2::StaticInfo& PbTick::static_() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Static)
  return static__ != NULL ? *static__ : *default_instance_->static__;
}
inline ::QuantBox::Data::Serializer::V2::StaticInfo* PbTick::mutable_static_() {
  set_has_static_();
  if (static__ == NULL) {
    static__ = new ::QuantBox::Data::Serializer::V2::StaticInfo;
  }
  // @@protoc_insertion_point(field_mutable:QuantBox.Data.Serializer.V2.PbTick.Static)
  return static__;
}
inline ::QuantBox::Data::Serializer::V2::StaticInfo* PbTick::release_static_() {
  clear_has_static_();
  ::QuantBox::Data::Serializer::V2::StaticInfo* temp = static__;
  static__ = NULL;
  return temp;
}
inline void PbTick::set_allocated_static_(::QuantBox::Data::Serializer::V2::StaticInfo* static_) {
  delete static__;
  static__ = static_;
  if (static_) {
    set_has_static_();
  } else {
    clear_has_static_();
  }
  // @@protoc_insertion_point(field_set_allocated:QuantBox.Data.Serializer.V2.PbTick.Static)
}

// optional .QuantBox.Data.Serializer.V2.StockSplitInfo Split = 16;
inline bool PbTick::has_split() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PbTick::set_has_split() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PbTick::clear_has_split() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PbTick::clear_split() {
  if (split_ != NULL) split_->::QuantBox::Data::Serializer::V2::StockSplitInfo::Clear();
  clear_has_split();
}
inline const ::QuantBox::Data::Serializer::V2::StockSplitInfo& PbTick::split() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.Split)
  return split_ != NULL ? *split_ : *default_instance_->split_;
}
inline ::QuantBox::Data::Serializer::V2::StockSplitInfo* PbTick::mutable_split() {
  set_has_split();
  if (split_ == NULL) {
    split_ = new ::QuantBox::Data::Serializer::V2::StockSplitInfo;
  }
  // @@protoc_insertion_point(field_mutable:QuantBox.Data.Serializer.V2.PbTick.Split)
  return split_;
}
inline ::QuantBox::Data::Serializer::V2::StockSplitInfo* PbTick::release_split() {
  clear_has_split();
  ::QuantBox::Data::Serializer::V2::StockSplitInfo* temp = split_;
  split_ = NULL;
  return temp;
}
inline void PbTick::set_allocated_split(::QuantBox::Data::Serializer::V2::StockSplitInfo* split) {
  delete split_;
  split_ = split;
  if (split) {
    set_has_split();
  } else {
    clear_has_split();
  }
  // @@protoc_insertion_point(field_set_allocated:QuantBox.Data.Serializer.V2.PbTick.Split)
}

// optional sint32 LocalTime_Msec = 17 [default = 0];
inline bool PbTick::has_localtime_msec() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PbTick::set_has_localtime_msec() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PbTick::clear_has_localtime_msec() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PbTick::clear_localtime_msec() {
  localtime_msec_ = 0;
  clear_has_localtime_msec();
}
inline ::google::protobuf::int32 PbTick::localtime_msec() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.PbTick.LocalTime_Msec)
  return localtime_msec_;
}
inline void PbTick::set_localtime_msec(::google::protobuf::int32 value) {
  set_has_localtime_msec();
  localtime_msec_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.PbTick.LocalTime_Msec)
}

// -------------------------------------------------------------------

// StaticInfo

// optional sint32 LowerLimitPrice = 1 [default = 0];
inline bool StaticInfo::has_lowerlimitprice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StaticInfo::set_has_lowerlimitprice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StaticInfo::clear_has_lowerlimitprice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StaticInfo::clear_lowerlimitprice() {
  lowerlimitprice_ = 0;
  clear_has_lowerlimitprice();
}
inline ::google::protobuf::int32 StaticInfo::lowerlimitprice() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StaticInfo.LowerLimitPrice)
  return lowerlimitprice_;
}
inline void StaticInfo::set_lowerlimitprice(::google::protobuf::int32 value) {
  set_has_lowerlimitprice();
  lowerlimitprice_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StaticInfo.LowerLimitPrice)
}

// optional sint32 UpperLimitPrice = 2 [default = 0];
inline bool StaticInfo::has_upperlimitprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StaticInfo::set_has_upperlimitprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StaticInfo::clear_has_upperlimitprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StaticInfo::clear_upperlimitprice() {
  upperlimitprice_ = 0;
  clear_has_upperlimitprice();
}
inline ::google::protobuf::int32 StaticInfo::upperlimitprice() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StaticInfo.UpperLimitPrice)
  return upperlimitprice_;
}
inline void StaticInfo::set_upperlimitprice(::google::protobuf::int32 value) {
  set_has_upperlimitprice();
  upperlimitprice_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StaticInfo.UpperLimitPrice)
}

// optional sint32 SettlementPrice = 3 [default = 0];
inline bool StaticInfo::has_settlementprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StaticInfo::set_has_settlementprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StaticInfo::clear_has_settlementprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StaticInfo::clear_settlementprice() {
  settlementprice_ = 0;
  clear_has_settlementprice();
}
inline ::google::protobuf::int32 StaticInfo::settlementprice() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StaticInfo.SettlementPrice)
  return settlementprice_;
}
inline void StaticInfo::set_settlementprice(::google::protobuf::int32 value) {
  set_has_settlementprice();
  settlementprice_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StaticInfo.SettlementPrice)
}

// optional string Symbol = 4;
inline bool StaticInfo::has_symbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StaticInfo::set_has_symbol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StaticInfo::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StaticInfo::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& StaticInfo::symbol() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StaticInfo.Symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StaticInfo::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StaticInfo.Symbol)
}
inline void StaticInfo::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QuantBox.Data.Serializer.V2.StaticInfo.Symbol)
}
inline void StaticInfo::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QuantBox.Data.Serializer.V2.StaticInfo.Symbol)
}
inline ::std::string* StaticInfo::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:QuantBox.Data.Serializer.V2.StaticInfo.Symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StaticInfo::release_symbol() {
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StaticInfo::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:QuantBox.Data.Serializer.V2.StaticInfo.Symbol)
}

// optional string Exchange = 5;
inline bool StaticInfo::has_exchange() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StaticInfo::set_has_exchange() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StaticInfo::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StaticInfo::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange();
}
inline const ::std::string& StaticInfo::exchange() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StaticInfo.Exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StaticInfo::set_exchange(const ::std::string& value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StaticInfo.Exchange)
}
inline void StaticInfo::set_exchange(const char* value) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QuantBox.Data.Serializer.V2.StaticInfo.Exchange)
}
inline void StaticInfo::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QuantBox.Data.Serializer.V2.StaticInfo.Exchange)
}
inline ::std::string* StaticInfo::mutable_exchange() {
  set_has_exchange();
  // @@protoc_insertion_point(field_mutable:QuantBox.Data.Serializer.V2.StaticInfo.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StaticInfo::release_exchange() {
  clear_has_exchange();
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StaticInfo::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:QuantBox.Data.Serializer.V2.StaticInfo.Exchange)
}

// -------------------------------------------------------------------

// StockSplitInfo

// optional double CashDividend = 1 [default = 0];
inline bool StockSplitInfo::has_cashdividend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockSplitInfo::set_has_cashdividend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockSplitInfo::clear_has_cashdividend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockSplitInfo::clear_cashdividend() {
  cashdividend_ = 0;
  clear_has_cashdividend();
}
inline double StockSplitInfo::cashdividend() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StockSplitInfo.CashDividend)
  return cashdividend_;
}
inline void StockSplitInfo::set_cashdividend(double value) {
  set_has_cashdividend();
  cashdividend_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StockSplitInfo.CashDividend)
}

// optional double StockDividend = 2 [default = 0];
inline bool StockSplitInfo::has_stockdividend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockSplitInfo::set_has_stockdividend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockSplitInfo::clear_has_stockdividend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockSplitInfo::clear_stockdividend() {
  stockdividend_ = 0;
  clear_has_stockdividend();
}
inline double StockSplitInfo::stockdividend() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StockSplitInfo.StockDividend)
  return stockdividend_;
}
inline void StockSplitInfo::set_stockdividend(double value) {
  set_has_stockdividend();
  stockdividend_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StockSplitInfo.StockDividend)
}

// optional double RightsOffering = 3 [default = 0];
inline bool StockSplitInfo::has_rightsoffering() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockSplitInfo::set_has_rightsoffering() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockSplitInfo::clear_has_rightsoffering() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockSplitInfo::clear_rightsoffering() {
  rightsoffering_ = 0;
  clear_has_rightsoffering();
}
inline double StockSplitInfo::rightsoffering() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StockSplitInfo.RightsOffering)
  return rightsoffering_;
}
inline void StockSplitInfo::set_rightsoffering(double value) {
  set_has_rightsoffering();
  rightsoffering_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StockSplitInfo.RightsOffering)
}

// optional double RightsOfferingPrice = 4 [default = 0];
inline bool StockSplitInfo::has_rightsofferingprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockSplitInfo::set_has_rightsofferingprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockSplitInfo::clear_has_rightsofferingprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockSplitInfo::clear_rightsofferingprice() {
  rightsofferingprice_ = 0;
  clear_has_rightsofferingprice();
}
inline double StockSplitInfo::rightsofferingprice() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StockSplitInfo.RightsOfferingPrice)
  return rightsofferingprice_;
}
inline void StockSplitInfo::set_rightsofferingprice(double value) {
  set_has_rightsofferingprice();
  rightsofferingprice_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StockSplitInfo.RightsOfferingPrice)
}

// optional double PreClose = 5 [default = 0];
inline bool StockSplitInfo::has_preclose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockSplitInfo::set_has_preclose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockSplitInfo::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockSplitInfo::clear_preclose() {
  preclose_ = 0;
  clear_has_preclose();
}
inline double StockSplitInfo::preclose() const {
  // @@protoc_insertion_point(field_get:QuantBox.Data.Serializer.V2.StockSplitInfo.PreClose)
  return preclose_;
}
inline void StockSplitInfo::set_preclose(double value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:QuantBox.Data.Serializer.V2.StockSplitInfo.PreClose)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace V2
}  // namespace Serializer
}  // namespace Data
}  // namespace QuantBox

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PbTick_2eproto__INCLUDED
