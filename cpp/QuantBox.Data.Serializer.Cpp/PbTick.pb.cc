// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbTick.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PbTick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuantBox {
namespace Data {
namespace Serializer {
namespace V2 {

namespace {

const ::google::protobuf::Descriptor* BarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepthTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepthTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockSplitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockSplitInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PbTick_2eproto() {
  protobuf_AddDesc_PbTick_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PbTick.proto");
  GOOGLE_CHECK(file != NULL);
  BarInfo_descriptor_ = file->message_type(0);
  static const int BarInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, barsize_),
  };
  BarInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BarInfo_descriptor_,
      BarInfo::default_instance_,
      BarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BarInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BarInfo, _internal_metadata_),
      -1);
  ConfigInfo_descriptor_ = file->message_type(1);
  static const int ConfigInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, ticksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, ticksizemultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, settlementpricemultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, averagepricemultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, contractmultiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, time_ssf_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, marketdepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, markettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, volume_total_or_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, turnover_total_or_increment_),
  };
  ConfigInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigInfo_descriptor_,
      ConfigInfo::default_instance_,
      ConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfigInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, _internal_metadata_),
      -1);
  DepthTick_descriptor_ = file->message_type(2);
  static const int DepthTick_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, value14_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, next_),
  };
  DepthTick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DepthTick_descriptor_,
      DepthTick::default_instance_,
      DepthTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, _has_bits_[0]),
      -1,
      -1,
      sizeof(DepthTick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthTick, _internal_metadata_),
      -1);
  PbTick_descriptor_ = file->message_type(3);
  static const int PbTick_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, actionday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, time_hhmm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, time_____ssf___),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, time________ff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, askprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, averageprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, bar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, static__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, localtime_msec_),
  };
  PbTick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PbTick_descriptor_,
      PbTick::default_instance_,
      PbTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, _has_bits_[0]),
      -1,
      -1,
      sizeof(PbTick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbTick, _internal_metadata_),
      -1);
  StaticInfo_descriptor_ = file->message_type(4);
  static const int StaticInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, lowerlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, upperlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, exchange_),
  };
  StaticInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StaticInfo_descriptor_,
      StaticInfo::default_instance_,
      StaticInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(StaticInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticInfo, _internal_metadata_),
      -1);
  StockSplitInfo_descriptor_ = file->message_type(5);
  static const int StockSplitInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockSplitInfo, cashdividend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockSplitInfo, stockdividend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockSplitInfo, rightsoffering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockSplitInfo, rightsofferingprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockSplitInfo, preclose_),
  };
  StockSplitInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockSplitInfo_descriptor_,
      StockSplitInfo::default_instance_,
      StockSplitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockSplitInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(StockSplitInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockSplitInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PbTick_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BarInfo_descriptor_, &BarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigInfo_descriptor_, &ConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DepthTick_descriptor_, &DepthTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PbTick_descriptor_, &PbTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StaticInfo_descriptor_, &StaticInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockSplitInfo_descriptor_, &StockSplitInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PbTick_2eproto() {
  delete BarInfo::default_instance_;
  delete BarInfo_reflection_;
  delete ConfigInfo::default_instance_;
  delete ConfigInfo_reflection_;
  delete DepthTick::default_instance_;
  delete DepthTick_reflection_;
  delete PbTick::default_instance_;
  delete PbTick_reflection_;
  delete StaticInfo::default_instance_;
  delete StaticInfo_reflection_;
  delete StockSplitInfo::default_instance_;
  delete StockSplitInfo_reflection_;
}

void protobuf_AddDesc_PbTick_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014PbTick.proto\022\033QuantBox.Data.Serializer"
    ".V2\"a\n\007BarInfo\022\017\n\004Open\030\001 \001(\021:\0010\022\017\n\004High\030"
    "\002 \001(\021:\0010\022\016\n\003Low\030\003 \001(\021:\0010\022\020\n\005Close\030\004 \001(\021:"
    "\0010\022\022\n\007BarSize\030\005 \001(\021:\0010\"\323\002\n\nConfigInfo\022\022\n"
    "\007Version\030\001 \001(\005:\0010\022\023\n\010TickSize\030\002 \001(\005:\0010\022\035"
    "\n\022TickSizeMultiplier\030\003 \001(\001:\0010\022$\n\031Settlem"
    "entPriceMultiplier\030\004 \001(\005:\0010\022!\n\026AveragePr"
    "iceMultiplier\030\005 \001(\005:\0010\022\035\n\022ContractMultip"
    "lier\030\006 \001(\001:\0010\022\030\n\rTime_ssf_Diff\030\007 \001(\005:\0010\022"
    "\026\n\013MarketDepth\030\010 \001(\005:\0010\022\025\n\nMarketType\030\t "
    "\001(\005:\0010\022$\n\031Volume_Total_Or_Increment\030\n \001("
    "\005:\0010\022&\n\033Turnover_Total_Or_Increment\030\013 \001("
    "\005:\0010\"\320\002\n\tDepthTick\022\021\n\006Value1\030\001 \001(\021:\0010\022\021\n"
    "\006Value2\030\002 \001(\021:\0010\022\021\n\006Value3\030\003 \001(\021:\0010\022\021\n\006V"
    "alue4\030\004 \001(\021:\0010\022\021\n\006Value5\030\005 \001(\021:\0010\022\021\n\006Val"
    "ue6\030\006 \001(\021:\0010\022\021\n\006Value7\030\007 \001(\021:\0010\022\021\n\006Value"
    "8\030\010 \001(\021:\0010\022\021\n\006Value9\030\t \001(\021:\0010\022\022\n\007Value10"
    "\030\n \001(\021:\0010\022\022\n\007Value11\030\013 \001(\021:\0010\022\022\n\007Value12"
    "\030\014 \001(\021:\0010\022\022\n\007Value13\030\r \001(\021:\0010\022\022\n\007Value14"
    "\030\016 \001(\021:\0010\0224\n\004Next\030\017 \001(\0132&.QuantBox.Data."
    "Serializer.V2.DepthTick\"\272\004\n\006PbTick\0227\n\006Co"
    "nfig\030\001 \001(\0132\'.QuantBox.Data.Serializer.V2"
    ".ConfigInfo\022\025\n\nTradingDay\030\002 \001(\021:\0010\022\024\n\tAc"
    "tionDay\030\003 \001(\021:\0010\022\024\n\tTime_HHmm\030\004 \001(\021:\0010\022\031"
    "\n\016Time_____ssf__\030\005 \001(\021:\0010\022\031\n\016Time_______"
    "_ff\030\006 \001(\021:\0010\022\024\n\tLastPrice\030\007 \001(\021:\0010\022\024\n\tAs"
    "kPrice1\030\010 \001(\021:\0010\0225\n\005Depth\030\t \001(\0132&.QuantB"
    "ox.Data.Serializer.V2.DepthTick\022\021\n\006Volum"
    "e\030\n \001(\022:\0010\022\027\n\014OpenInterest\030\013 \001(\022:\0010\022\023\n\010T"
    "urnover\030\014 \001(\022:\0010\022\027\n\014AveragePrice\030\r \001(\021:\001"
    "0\0221\n\003Bar\030\016 \001(\0132$.QuantBox.Data.Serialize"
    "r.V2.BarInfo\0227\n\006Static\030\017 \001(\0132\'.QuantBox."
    "Data.Serializer.V2.StaticInfo\022:\n\005Split\030\020"
    " \001(\0132+.QuantBox.Data.Serializer.V2.Stock"
    "SplitInfo\022\031\n\016LocalTime_Msec\030\021 \001(\021:\0010\"\202\001\n"
    "\nStaticInfo\022\032\n\017LowerLimitPrice\030\001 \001(\021:\0010\022"
    "\032\n\017UpperLimitPrice\030\002 \001(\021:\0010\022\032\n\017Settlemen"
    "tPrice\030\003 \001(\021:\0010\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010Excha"
    "nge\030\005 \001(\t\"\223\001\n\016StockSplitInfo\022\027\n\014CashDivi"
    "dend\030\001 \001(\001:\0010\022\030\n\rStockDividend\030\002 \001(\001:\0010\022"
    "\031\n\016RightsOffering\030\003 \001(\001:\0010\022\036\n\023RightsOffe"
    "ringPrice\030\004 \001(\001:\0010\022\023\n\010PreClose\030\005 \001(\001:\0010", 1679);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PbTick.proto", &protobuf_RegisterTypes);
  BarInfo::default_instance_ = new BarInfo();
  ConfigInfo::default_instance_ = new ConfigInfo();
  DepthTick::default_instance_ = new DepthTick();
  PbTick::default_instance_ = new PbTick();
  StaticInfo::default_instance_ = new StaticInfo();
  StockSplitInfo::default_instance_ = new StockSplitInfo();
  BarInfo::default_instance_->InitAsDefaultInstance();
  ConfigInfo::default_instance_->InitAsDefaultInstance();
  DepthTick::default_instance_->InitAsDefaultInstance();
  PbTick::default_instance_->InitAsDefaultInstance();
  StaticInfo::default_instance_->InitAsDefaultInstance();
  StockSplitInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PbTick_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PbTick_2eproto {
  StaticDescriptorInitializer_PbTick_2eproto() {
    protobuf_AddDesc_PbTick_2eproto();
  }
} static_descriptor_initializer_PbTick_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int BarInfo::kOpenFieldNumber;
const int BarInfo::kHighFieldNumber;
const int BarInfo::kLowFieldNumber;
const int BarInfo::kCloseFieldNumber;
const int BarInfo::kBarSizeFieldNumber;
#endif  // !_MSC_VER

BarInfo::BarInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuantBox.Data.Serializer.V2.BarInfo)
}

void BarInfo::InitAsDefaultInstance() {
}

BarInfo::BarInfo(const BarInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuantBox.Data.Serializer.V2.BarInfo)
}

void BarInfo::SharedCtor() {
  _cached_size_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  barsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BarInfo::~BarInfo() {
  // @@protoc_insertion_point(destructor:QuantBox.Data.Serializer.V2.BarInfo)
  SharedDtor();
}

void BarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BarInfo_descriptor_;
}

const BarInfo& BarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PbTick_2eproto();
  return *default_instance_;
}

BarInfo* BarInfo::default_instance_ = NULL;

BarInfo* BarInfo::New(::google::protobuf::Arena* arena) const {
  BarInfo* n = new BarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BarInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BarInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(open_, barsize_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuantBox.Data.Serializer.V2.BarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Open = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_High;
        break;
      }

      // optional sint32 High = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_High:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Low;
        break;
      }

      // optional sint32 Low = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Close;
        break;
      }

      // optional sint32 Close = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_Close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BarSize;
        break;
      }

      // optional sint32 BarSize = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_BarSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &barsize_)));
          set_has_barsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuantBox.Data.Serializer.V2.BarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuantBox.Data.Serializer.V2.BarInfo)
  return false;
#undef DO_
}

void BarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuantBox.Data.Serializer.V2.BarInfo)
  // optional sint32 Open = 1 [default = 0];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->open(), output);
  }

  // optional sint32 High = 2 [default = 0];
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->high(), output);
  }

  // optional sint32 Low = 3 [default = 0];
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->low(), output);
  }

  // optional sint32 Close = 4 [default = 0];
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->close(), output);
  }

  // optional sint32 BarSize = 5 [default = 0];
  if (has_barsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->barsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuantBox.Data.Serializer.V2.BarInfo)
}

::google::protobuf::uint8* BarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuantBox.Data.Serializer.V2.BarInfo)
  // optional sint32 Open = 1 [default = 0];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->open(), target);
  }

  // optional sint32 High = 2 [default = 0];
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->high(), target);
  }

  // optional sint32 Low = 3 [default = 0];
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->low(), target);
  }

  // optional sint32 Close = 4 [default = 0];
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->close(), target);
  }

  // optional sint32 BarSize = 5 [default = 0];
  if (has_barsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->barsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuantBox.Data.Serializer.V2.BarInfo)
  return target;
}

int BarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional sint32 Open = 1 [default = 0];
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->open());
    }

    // optional sint32 High = 2 [default = 0];
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->high());
    }

    // optional sint32 Low = 3 [default = 0];
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->low());
    }

    // optional sint32 Close = 4 [default = 0];
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->close());
    }

    // optional sint32 BarSize = 5 [default = 0];
    if (has_barsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->barsize());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BarInfo::MergeFrom(const BarInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_barsize()) {
      set_barsize(from.barsize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarInfo::CopyFrom(const BarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarInfo::IsInitialized() const {

  return true;
}

void BarInfo::Swap(BarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BarInfo::InternalSwap(BarInfo* other) {
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(close_, other->close_);
  std::swap(barsize_, other->barsize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BarInfo_descriptor_;
  metadata.reflection = BarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigInfo::kVersionFieldNumber;
const int ConfigInfo::kTickSizeFieldNumber;
const int ConfigInfo::kTickSizeMultiplierFieldNumber;
const int ConfigInfo::kSettlementPriceMultiplierFieldNumber;
const int ConfigInfo::kAveragePriceMultiplierFieldNumber;
const int ConfigInfo::kContractMultiplierFieldNumber;
const int ConfigInfo::kTimeSsfDiffFieldNumber;
const int ConfigInfo::kMarketDepthFieldNumber;
const int ConfigInfo::kMarketTypeFieldNumber;
const int ConfigInfo::kVolumeTotalOrIncrementFieldNumber;
const int ConfigInfo::kTurnoverTotalOrIncrementFieldNumber;
#endif  // !_MSC_VER

ConfigInfo::ConfigInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuantBox.Data.Serializer.V2.ConfigInfo)
}

void ConfigInfo::InitAsDefaultInstance() {
}

ConfigInfo::ConfigInfo(const ConfigInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuantBox.Data.Serializer.V2.ConfigInfo)
}

void ConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ticksize_ = 0;
  ticksizemultiplier_ = 0;
  settlementpricemultiplier_ = 0;
  averagepricemultiplier_ = 0;
  contractmultiplier_ = 0;
  time_ssf_diff_ = 0;
  marketdepth_ = 0;
  markettype_ = 0;
  volume_total_or_increment_ = 0;
  turnover_total_or_increment_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigInfo::~ConfigInfo() {
  // @@protoc_insertion_point(destructor:QuantBox.Data.Serializer.V2.ConfigInfo)
  SharedDtor();
}

void ConfigInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigInfo_descriptor_;
}

const ConfigInfo& ConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PbTick_2eproto();
  return *default_instance_;
}

ConfigInfo* ConfigInfo::default_instance_ = NULL;

ConfigInfo* ConfigInfo::New(::google::protobuf::Arena* arena) const {
  ConfigInfo* n = new ConfigInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConfigInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(version_, marketdepth_);
  }
  ZR_(markettype_, turnover_total_or_increment_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuantBox.Data.Serializer.V2.ConfigInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TickSize;
        break;
      }

      // optional int32 TickSize = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_TickSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticksize_)));
          set_has_ticksize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_TickSizeMultiplier;
        break;
      }

      // optional double TickSizeMultiplier = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_TickSizeMultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ticksizemultiplier_)));
          set_has_ticksizemultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SettlementPriceMultiplier;
        break;
      }

      // optional int32 SettlementPriceMultiplier = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_SettlementPriceMultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementpricemultiplier_)));
          set_has_settlementpricemultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AveragePriceMultiplier;
        break;
      }

      // optional int32 AveragePriceMultiplier = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_AveragePriceMultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averagepricemultiplier_)));
          set_has_averagepricemultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_ContractMultiplier;
        break;
      }

      // optional double ContractMultiplier = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_ContractMultiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contractmultiplier_)));
          set_has_contractmultiplier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Time_ssf_Diff;
        break;
      }

      // optional int32 Time_ssf_Diff = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_Time_ssf_Diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_ssf_diff_)));
          set_has_time_ssf_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_MarketDepth;
        break;
      }

      // optional int32 MarketDepth = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_MarketDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marketdepth_)));
          set_has_marketdepth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MarketType;
        break;
      }

      // optional int32 MarketType = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_MarketType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markettype_)));
          set_has_markettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Volume_Total_Or_Increment;
        break;
      }

      // optional int32 Volume_Total_Or_Increment = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_Volume_Total_Or_Increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_total_or_increment_)));
          set_has_volume_total_or_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Turnover_Total_Or_Increment;
        break;
      }

      // optional int32 Turnover_Total_Or_Increment = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_Turnover_Total_Or_Increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnover_total_or_increment_)));
          set_has_turnover_total_or_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuantBox.Data.Serializer.V2.ConfigInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuantBox.Data.Serializer.V2.ConfigInfo)
  return false;
#undef DO_
}

void ConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuantBox.Data.Serializer.V2.ConfigInfo)
  // optional int32 Version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 TickSize = 2 [default = 0];
  if (has_ticksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ticksize(), output);
  }

  // optional double TickSizeMultiplier = 3 [default = 0];
  if (has_ticksizemultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ticksizemultiplier(), output);
  }

  // optional int32 SettlementPriceMultiplier = 4 [default = 0];
  if (has_settlementpricemultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->settlementpricemultiplier(), output);
  }

  // optional int32 AveragePriceMultiplier = 5 [default = 0];
  if (has_averagepricemultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->averagepricemultiplier(), output);
  }

  // optional double ContractMultiplier = 6 [default = 0];
  if (has_contractmultiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->contractmultiplier(), output);
  }

  // optional int32 Time_ssf_Diff = 7 [default = 0];
  if (has_time_ssf_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time_ssf_diff(), output);
  }

  // optional int32 MarketDepth = 8 [default = 0];
  if (has_marketdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->marketdepth(), output);
  }

  // optional int32 MarketType = 9 [default = 0];
  if (has_markettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->markettype(), output);
  }

  // optional int32 Volume_Total_Or_Increment = 10 [default = 0];
  if (has_volume_total_or_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->volume_total_or_increment(), output);
  }

  // optional int32 Turnover_Total_Or_Increment = 11 [default = 0];
  if (has_turnover_total_or_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->turnover_total_or_increment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuantBox.Data.Serializer.V2.ConfigInfo)
}

::google::protobuf::uint8* ConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuantBox.Data.Serializer.V2.ConfigInfo)
  // optional int32 Version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 TickSize = 2 [default = 0];
  if (has_ticksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ticksize(), target);
  }

  // optional double TickSizeMultiplier = 3 [default = 0];
  if (has_ticksizemultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ticksizemultiplier(), target);
  }

  // optional int32 SettlementPriceMultiplier = 4 [default = 0];
  if (has_settlementpricemultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->settlementpricemultiplier(), target);
  }

  // optional int32 AveragePriceMultiplier = 5 [default = 0];
  if (has_averagepricemultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->averagepricemultiplier(), target);
  }

  // optional double ContractMultiplier = 6 [default = 0];
  if (has_contractmultiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->contractmultiplier(), target);
  }

  // optional int32 Time_ssf_Diff = 7 [default = 0];
  if (has_time_ssf_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time_ssf_diff(), target);
  }

  // optional int32 MarketDepth = 8 [default = 0];
  if (has_marketdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->marketdepth(), target);
  }

  // optional int32 MarketType = 9 [default = 0];
  if (has_markettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->markettype(), target);
  }

  // optional int32 Volume_Total_Or_Increment = 10 [default = 0];
  if (has_volume_total_or_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->volume_total_or_increment(), target);
  }

  // optional int32 Turnover_Total_Or_Increment = 11 [default = 0];
  if (has_turnover_total_or_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->turnover_total_or_increment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuantBox.Data.Serializer.V2.ConfigInfo)
  return target;
}

int ConfigInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional int32 Version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 TickSize = 2 [default = 0];
    if (has_ticksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticksize());
    }

    // optional double TickSizeMultiplier = 3 [default = 0];
    if (has_ticksizemultiplier()) {
      total_size += 1 + 8;
    }

    // optional int32 SettlementPriceMultiplier = 4 [default = 0];
    if (has_settlementpricemultiplier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementpricemultiplier());
    }

    // optional int32 AveragePriceMultiplier = 5 [default = 0];
    if (has_averagepricemultiplier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->averagepricemultiplier());
    }

    // optional double ContractMultiplier = 6 [default = 0];
    if (has_contractmultiplier()) {
      total_size += 1 + 8;
    }

    // optional int32 Time_ssf_Diff = 7 [default = 0];
    if (has_time_ssf_diff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_ssf_diff());
    }

    // optional int32 MarketDepth = 8 [default = 0];
    if (has_marketdepth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marketdepth());
    }

  }
  if (_has_bits_[8 / 32] & 1792) {
    // optional int32 MarketType = 9 [default = 0];
    if (has_markettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markettype());
    }

    // optional int32 Volume_Total_Or_Increment = 10 [default = 0];
    if (has_volume_total_or_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume_total_or_increment());
    }

    // optional int32 Turnover_Total_Or_Increment = 11 [default = 0];
    if (has_turnover_total_or_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnover_total_or_increment());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigInfo::MergeFrom(const ConfigInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ticksize()) {
      set_ticksize(from.ticksize());
    }
    if (from.has_ticksizemultiplier()) {
      set_ticksizemultiplier(from.ticksizemultiplier());
    }
    if (from.has_settlementpricemultiplier()) {
      set_settlementpricemultiplier(from.settlementpricemultiplier());
    }
    if (from.has_averagepricemultiplier()) {
      set_averagepricemultiplier(from.averagepricemultiplier());
    }
    if (from.has_contractmultiplier()) {
      set_contractmultiplier(from.contractmultiplier());
    }
    if (from.has_time_ssf_diff()) {
      set_time_ssf_diff(from.time_ssf_diff());
    }
    if (from.has_marketdepth()) {
      set_marketdepth(from.marketdepth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_markettype()) {
      set_markettype(from.markettype());
    }
    if (from.has_volume_total_or_increment()) {
      set_volume_total_or_increment(from.volume_total_or_increment());
    }
    if (from.has_turnover_total_or_increment()) {
      set_turnover_total_or_increment(from.turnover_total_or_increment());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigInfo::CopyFrom(const ConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigInfo::IsInitialized() const {

  return true;
}

void ConfigInfo::Swap(ConfigInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigInfo::InternalSwap(ConfigInfo* other) {
  std::swap(version_, other->version_);
  std::swap(ticksize_, other->ticksize_);
  std::swap(ticksizemultiplier_, other->ticksizemultiplier_);
  std::swap(settlementpricemultiplier_, other->settlementpricemultiplier_);
  std::swap(averagepricemultiplier_, other->averagepricemultiplier_);
  std::swap(contractmultiplier_, other->contractmultiplier_);
  std::swap(time_ssf_diff_, other->time_ssf_diff_);
  std::swap(marketdepth_, other->marketdepth_);
  std::swap(markettype_, other->markettype_);
  std::swap(volume_total_or_increment_, other->volume_total_or_increment_);
  std::swap(turnover_total_or_increment_, other->turnover_total_or_increment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigInfo_descriptor_;
  metadata.reflection = ConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepthTick::kValue1FieldNumber;
const int DepthTick::kValue2FieldNumber;
const int DepthTick::kValue3FieldNumber;
const int DepthTick::kValue4FieldNumber;
const int DepthTick::kValue5FieldNumber;
const int DepthTick::kValue6FieldNumber;
const int DepthTick::kValue7FieldNumber;
const int DepthTick::kValue8FieldNumber;
const int DepthTick::kValue9FieldNumber;
const int DepthTick::kValue10FieldNumber;
const int DepthTick::kValue11FieldNumber;
const int DepthTick::kValue12FieldNumber;
const int DepthTick::kValue13FieldNumber;
const int DepthTick::kValue14FieldNumber;
const int DepthTick::kNextFieldNumber;
#endif  // !_MSC_VER

DepthTick::DepthTick()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuantBox.Data.Serializer.V2.DepthTick)
}

void DepthTick::InitAsDefaultInstance() {
  next_ = const_cast< ::QuantBox::Data::Serializer::V2::DepthTick*>(&::QuantBox::Data::Serializer::V2::DepthTick::default_instance());
}

DepthTick::DepthTick(const DepthTick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuantBox.Data.Serializer.V2.DepthTick)
}

void DepthTick::SharedCtor() {
  _cached_size_ = 0;
  value1_ = 0;
  value2_ = 0;
  value3_ = 0;
  value4_ = 0;
  value5_ = 0;
  value6_ = 0;
  value7_ = 0;
  value8_ = 0;
  value9_ = 0;
  value10_ = 0;
  value11_ = 0;
  value12_ = 0;
  value13_ = 0;
  value14_ = 0;
  next_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepthTick::~DepthTick() {
  // @@protoc_insertion_point(destructor:QuantBox.Data.Serializer.V2.DepthTick)
  SharedDtor();
}

void DepthTick::SharedDtor() {
  if (this != default_instance_) {
    delete next_;
  }
}

void DepthTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepthTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepthTick_descriptor_;
}

const DepthTick& DepthTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PbTick_2eproto();
  return *default_instance_;
}

DepthTick* DepthTick::default_instance_ = NULL;

DepthTick* DepthTick::New(::google::protobuf::Arena* arena) const {
  DepthTick* n = new DepthTick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DepthTick::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DepthTick*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(value1_, value8_);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(value9_, value14_);
    if (has_next()) {
      if (next_ != NULL) next_->::QuantBox::Data::Serializer::V2::DepthTick::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DepthTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuantBox.Data.Serializer.V2.DepthTick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Value1 = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Value2;
        break;
      }

      // optional sint32 Value2 = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_Value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Value3;
        break;
      }

      // optional sint32 Value3 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_Value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value3_)));
          set_has_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Value4;
        break;
      }

      // optional sint32 Value4 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_Value4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value4_)));
          set_has_value4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Value5;
        break;
      }

      // optional sint32 Value5 = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_Value5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value5_)));
          set_has_value5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Value6;
        break;
      }

      // optional sint32 Value6 = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_Value6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value6_)));
          set_has_value6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Value7;
        break;
      }

      // optional sint32 Value7 = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_Value7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value7_)));
          set_has_value7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Value8;
        break;
      }

      // optional sint32 Value8 = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_Value8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value8_)));
          set_has_value8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Value9;
        break;
      }

      // optional sint32 Value9 = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_Value9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value9_)));
          set_has_value9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Value10;
        break;
      }

      // optional sint32 Value10 = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_Value10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value10_)));
          set_has_value10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Value11;
        break;
      }

      // optional sint32 Value11 = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_Value11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value11_)));
          set_has_value11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Value12;
        break;
      }

      // optional sint32 Value12 = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_Value12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value12_)));
          set_has_value12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Value13;
        break;
      }

      // optional sint32 Value13 = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_Value13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value13_)));
          set_has_value13();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Value14;
        break;
      }

      // optional sint32 Value14 = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_Value14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value14_)));
          set_has_value14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Next;
        break;
      }

      // optional .QuantBox.Data.Serializer.V2.DepthTick Next = 15;
      case 15: {
        if (tag == 122) {
         parse_Next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuantBox.Data.Serializer.V2.DepthTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuantBox.Data.Serializer.V2.DepthTick)
  return false;
#undef DO_
}

void DepthTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuantBox.Data.Serializer.V2.DepthTick)
  // optional sint32 Value1 = 1 [default = 0];
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->value1(), output);
  }

  // optional sint32 Value2 = 2 [default = 0];
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->value2(), output);
  }

  // optional sint32 Value3 = 3 [default = 0];
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->value3(), output);
  }

  // optional sint32 Value4 = 4 [default = 0];
  if (has_value4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->value4(), output);
  }

  // optional sint32 Value5 = 5 [default = 0];
  if (has_value5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->value5(), output);
  }

  // optional sint32 Value6 = 6 [default = 0];
  if (has_value6()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->value6(), output);
  }

  // optional sint32 Value7 = 7 [default = 0];
  if (has_value7()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->value7(), output);
  }

  // optional sint32 Value8 = 8 [default = 0];
  if (has_value8()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->value8(), output);
  }

  // optional sint32 Value9 = 9 [default = 0];
  if (has_value9()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->value9(), output);
  }

  // optional sint32 Value10 = 10 [default = 0];
  if (has_value10()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->value10(), output);
  }

  // optional sint32 Value11 = 11 [default = 0];
  if (has_value11()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->value11(), output);
  }

  // optional sint32 Value12 = 12 [default = 0];
  if (has_value12()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->value12(), output);
  }

  // optional sint32 Value13 = 13 [default = 0];
  if (has_value13()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->value13(), output);
  }

  // optional sint32 Value14 = 14 [default = 0];
  if (has_value14()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->value14(), output);
  }

  // optional .QuantBox.Data.Serializer.V2.DepthTick Next = 15;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->next_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuantBox.Data.Serializer.V2.DepthTick)
}

::google::protobuf::uint8* DepthTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuantBox.Data.Serializer.V2.DepthTick)
  // optional sint32 Value1 = 1 [default = 0];
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->value1(), target);
  }

  // optional sint32 Value2 = 2 [default = 0];
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->value2(), target);
  }

  // optional sint32 Value3 = 3 [default = 0];
  if (has_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->value3(), target);
  }

  // optional sint32 Value4 = 4 [default = 0];
  if (has_value4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->value4(), target);
  }

  // optional sint32 Value5 = 5 [default = 0];
  if (has_value5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->value5(), target);
  }

  // optional sint32 Value6 = 6 [default = 0];
  if (has_value6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->value6(), target);
  }

  // optional sint32 Value7 = 7 [default = 0];
  if (has_value7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->value7(), target);
  }

  // optional sint32 Value8 = 8 [default = 0];
  if (has_value8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->value8(), target);
  }

  // optional sint32 Value9 = 9 [default = 0];
  if (has_value9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->value9(), target);
  }

  // optional sint32 Value10 = 10 [default = 0];
  if (has_value10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->value10(), target);
  }

  // optional sint32 Value11 = 11 [default = 0];
  if (has_value11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->value11(), target);
  }

  // optional sint32 Value12 = 12 [default = 0];
  if (has_value12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->value12(), target);
  }

  // optional sint32 Value13 = 13 [default = 0];
  if (has_value13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->value13(), target);
  }

  // optional sint32 Value14 = 14 [default = 0];
  if (has_value14()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->value14(), target);
  }

  // optional .QuantBox.Data.Serializer.V2.DepthTick Next = 15;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->next_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuantBox.Data.Serializer.V2.DepthTick)
  return target;
}

int DepthTick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional sint32 Value1 = 1 [default = 0];
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value1());
    }

    // optional sint32 Value2 = 2 [default = 0];
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value2());
    }

    // optional sint32 Value3 = 3 [default = 0];
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value3());
    }

    // optional sint32 Value4 = 4 [default = 0];
    if (has_value4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value4());
    }

    // optional sint32 Value5 = 5 [default = 0];
    if (has_value5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value5());
    }

    // optional sint32 Value6 = 6 [default = 0];
    if (has_value6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value6());
    }

    // optional sint32 Value7 = 7 [default = 0];
    if (has_value7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value7());
    }

    // optional sint32 Value8 = 8 [default = 0];
    if (has_value8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value8());
    }

  }
  if (_has_bits_[8 / 32] & 32512) {
    // optional sint32 Value9 = 9 [default = 0];
    if (has_value9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value9());
    }

    // optional sint32 Value10 = 10 [default = 0];
    if (has_value10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value10());
    }

    // optional sint32 Value11 = 11 [default = 0];
    if (has_value11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value11());
    }

    // optional sint32 Value12 = 12 [default = 0];
    if (has_value12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value12());
    }

    // optional sint32 Value13 = 13 [default = 0];
    if (has_value13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value13());
    }

    // optional sint32 Value14 = 14 [default = 0];
    if (has_value14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value14());
    }

    // optional .QuantBox.Data.Serializer.V2.DepthTick Next = 15;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->next_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepthTick::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DepthTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepthTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepthTick::MergeFrom(const DepthTick& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
    if (from.has_value4()) {
      set_value4(from.value4());
    }
    if (from.has_value5()) {
      set_value5(from.value5());
    }
    if (from.has_value6()) {
      set_value6(from.value6());
    }
    if (from.has_value7()) {
      set_value7(from.value7());
    }
    if (from.has_value8()) {
      set_value8(from.value8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value9()) {
      set_value9(from.value9());
    }
    if (from.has_value10()) {
      set_value10(from.value10());
    }
    if (from.has_value11()) {
      set_value11(from.value11());
    }
    if (from.has_value12()) {
      set_value12(from.value12());
    }
    if (from.has_value13()) {
      set_value13(from.value13());
    }
    if (from.has_value14()) {
      set_value14(from.value14());
    }
    if (from.has_next()) {
      mutable_next()->::QuantBox::Data::Serializer::V2::DepthTick::MergeFrom(from.next());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DepthTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthTick::CopyFrom(const DepthTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthTick::IsInitialized() const {

  return true;
}

void DepthTick::Swap(DepthTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthTick::InternalSwap(DepthTick* other) {
  std::swap(value1_, other->value1_);
  std::swap(value2_, other->value2_);
  std::swap(value3_, other->value3_);
  std::swap(value4_, other->value4_);
  std::swap(value5_, other->value5_);
  std::swap(value6_, other->value6_);
  std::swap(value7_, other->value7_);
  std::swap(value8_, other->value8_);
  std::swap(value9_, other->value9_);
  std::swap(value10_, other->value10_);
  std::swap(value11_, other->value11_);
  std::swap(value12_, other->value12_);
  std::swap(value13_, other->value13_);
  std::swap(value14_, other->value14_);
  std::swap(next_, other->next_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DepthTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepthTick_descriptor_;
  metadata.reflection = DepthTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbTick::kConfigFieldNumber;
const int PbTick::kTradingDayFieldNumber;
const int PbTick::kActionDayFieldNumber;
const int PbTick::kTimeHHmmFieldNumber;
const int PbTick::kTimeSsfFieldNumber;
const int PbTick::kTimeFfFieldNumber;
const int PbTick::kLastPriceFieldNumber;
const int PbTick::kAskPrice1FieldNumber;
const int PbTick::kDepthFieldNumber;
const int PbTick::kVolumeFieldNumber;
const int PbTick::kOpenInterestFieldNumber;
const int PbTick::kTurnoverFieldNumber;
const int PbTick::kAveragePriceFieldNumber;
const int PbTick::kBarFieldNumber;
const int PbTick::kStaticFieldNumber;
const int PbTick::kSplitFieldNumber;
const int PbTick::kLocalTimeMsecFieldNumber;
#endif  // !_MSC_VER

PbTick::PbTick()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuantBox.Data.Serializer.V2.PbTick)
}

void PbTick::InitAsDefaultInstance() {
  config_ = const_cast< ::QuantBox::Data::Serializer::V2::ConfigInfo*>(&::QuantBox::Data::Serializer::V2::ConfigInfo::default_instance());
  depth_ = const_cast< ::QuantBox::Data::Serializer::V2::DepthTick*>(&::QuantBox::Data::Serializer::V2::DepthTick::default_instance());
  bar_ = const_cast< ::QuantBox::Data::Serializer::V2::BarInfo*>(&::QuantBox::Data::Serializer::V2::BarInfo::default_instance());
  static__ = const_cast< ::QuantBox::Data::Serializer::V2::StaticInfo*>(&::QuantBox::Data::Serializer::V2::StaticInfo::default_instance());
  split_ = const_cast< ::QuantBox::Data::Serializer::V2::StockSplitInfo*>(&::QuantBox::Data::Serializer::V2::StockSplitInfo::default_instance());
}

PbTick::PbTick(const PbTick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuantBox.Data.Serializer.V2.PbTick)
}

void PbTick::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  tradingday_ = 0;
  actionday_ = 0;
  time_hhmm_ = 0;
  time_____ssf___ = 0;
  time________ff_ = 0;
  lastprice_ = 0;
  askprice1_ = 0;
  depth_ = NULL;
  volume_ = GOOGLE_LONGLONG(0);
  openinterest_ = GOOGLE_LONGLONG(0);
  turnover_ = GOOGLE_LONGLONG(0);
  averageprice_ = 0;
  bar_ = NULL;
  static__ = NULL;
  split_ = NULL;
  localtime_msec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbTick::~PbTick() {
  // @@protoc_insertion_point(destructor:QuantBox.Data.Serializer.V2.PbTick)
  SharedDtor();
}

void PbTick::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
    delete depth_;
    delete bar_;
    delete static__;
    delete split_;
  }
}

void PbTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbTick_descriptor_;
}

const PbTick& PbTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PbTick_2eproto();
  return *default_instance_;
}

PbTick* PbTick::default_instance_ = NULL;

PbTick* PbTick::New(::google::protobuf::Arena* arena) const {
  PbTick* n = new PbTick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbTick::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbTick*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tradingday_, lastprice_);
    if (has_config()) {
      if (config_ != NULL) config_->::QuantBox::Data::Serializer::V2::ConfigInfo::Clear();
    }
    askprice1_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(averageprice_, turnover_);
    if (has_depth()) {
      if (depth_ != NULL) depth_->::QuantBox::Data::Serializer::V2::DepthTick::Clear();
    }
    volume_ = GOOGLE_LONGLONG(0);
    if (has_bar()) {
      if (bar_ != NULL) bar_->::QuantBox::Data::Serializer::V2::BarInfo::Clear();
    }
    if (has_static_()) {
      if (static__ != NULL) static__->::QuantBox::Data::Serializer::V2::StaticInfo::Clear();
    }
    if (has_split()) {
      if (split_ != NULL) split_->::QuantBox::Data::Serializer::V2::StockSplitInfo::Clear();
    }
  }
  localtime_msec_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PbTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuantBox.Data.Serializer.V2.PbTick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuantBox.Data.Serializer.V2.ConfigInfo Config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TradingDay;
        break;
      }

      // optional sint32 TradingDay = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_TradingDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ActionDay;
        break;
      }

      // optional sint32 ActionDay = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_ActionDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &actionday_)));
          set_has_actionday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Time_HHmm;
        break;
      }

      // optional sint32 Time_HHmm = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_Time_HHmm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_hhmm_)));
          set_has_time_hhmm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Time_____ssf__;
        break;
      }

      // optional sint32 Time_____ssf__ = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_Time_____ssf__:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_____ssf___)));
          set_has_time_____ssf__();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Time________ff;
        break;
      }

      // optional sint32 Time________ff = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_Time________ff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time________ff_)));
          set_has_time________ff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LastPrice;
        break;
      }

      // optional sint32 LastPrice = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_LastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AskPrice1;
        break;
      }

      // optional sint32 AskPrice1 = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_AskPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &askprice1_)));
          set_has_askprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Depth;
        break;
      }

      // optional .QuantBox.Data.Serializer.V2.DepthTick Depth = 9;
      case 9: {
        if (tag == 74) {
         parse_Depth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_depth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Volume;
        break;
      }

      // optional sint64 Volume = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_OpenInterest;
        break;
      }

      // optional sint64 OpenInterest = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Turnover;
        break;
      }

      // optional sint64 Turnover = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_Turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_AveragePrice;
        break;
      }

      // optional sint32 AveragePrice = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_AveragePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &averageprice_)));
          set_has_averageprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_Bar;
        break;
      }

      // optional .QuantBox.Data.Serializer.V2.BarInfo Bar = 14;
      case 14: {
        if (tag == 114) {
         parse_Bar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Static;
        break;
      }

      // optional .QuantBox.Data.Serializer.V2.StaticInfo Static = 15;
      case 15: {
        if (tag == 122) {
         parse_Static:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_static_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_Split;
        break;
      }

      // optional .QuantBox.Data.Serializer.V2.StockSplitInfo Split = 16;
      case 16: {
        if (tag == 130) {
         parse_Split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_LocalTime_Msec;
        break;
      }

      // optional sint32 LocalTime_Msec = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_LocalTime_Msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &localtime_msec_)));
          set_has_localtime_msec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuantBox.Data.Serializer.V2.PbTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuantBox.Data.Serializer.V2.PbTick)
  return false;
#undef DO_
}

void PbTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuantBox.Data.Serializer.V2.PbTick)
  // optional .QuantBox.Data.Serializer.V2.ConfigInfo Config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // optional sint32 TradingDay = 2 [default = 0];
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->tradingday(), output);
  }

  // optional sint32 ActionDay = 3 [default = 0];
  if (has_actionday()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->actionday(), output);
  }

  // optional sint32 Time_HHmm = 4 [default = 0];
  if (has_time_hhmm()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->time_hhmm(), output);
  }

  // optional sint32 Time_____ssf__ = 5 [default = 0];
  if (has_time_____ssf__()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->time_____ssf__(), output);
  }

  // optional sint32 Time________ff = 6 [default = 0];
  if (has_time________ff()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->time________ff(), output);
  }

  // optional sint32 LastPrice = 7 [default = 0];
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->lastprice(), output);
  }

  // optional sint32 AskPrice1 = 8 [default = 0];
  if (has_askprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->askprice1(), output);
  }

  // optional .QuantBox.Data.Serializer.V2.DepthTick Depth = 9;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->depth_, output);
  }

  // optional sint64 Volume = 10 [default = 0];
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(10, this->volume(), output);
  }

  // optional sint64 OpenInterest = 11 [default = 0];
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->openinterest(), output);
  }

  // optional sint64 Turnover = 12 [default = 0];
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(12, this->turnover(), output);
  }

  // optional sint32 AveragePrice = 13 [default = 0];
  if (has_averageprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->averageprice(), output);
  }

  // optional .QuantBox.Data.Serializer.V2.BarInfo Bar = 14;
  if (has_bar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->bar_, output);
  }

  // optional .QuantBox.Data.Serializer.V2.StaticInfo Static = 15;
  if (has_static_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->static__, output);
  }

  // optional .QuantBox.Data.Serializer.V2.StockSplitInfo Split = 16;
  if (has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->split_, output);
  }

  // optional sint32 LocalTime_Msec = 17 [default = 0];
  if (has_localtime_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->localtime_msec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuantBox.Data.Serializer.V2.PbTick)
}

::google::protobuf::uint8* PbTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuantBox.Data.Serializer.V2.PbTick)
  // optional .QuantBox.Data.Serializer.V2.ConfigInfo Config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->config_, target);
  }

  // optional sint32 TradingDay = 2 [default = 0];
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->tradingday(), target);
  }

  // optional sint32 ActionDay = 3 [default = 0];
  if (has_actionday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->actionday(), target);
  }

  // optional sint32 Time_HHmm = 4 [default = 0];
  if (has_time_hhmm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->time_hhmm(), target);
  }

  // optional sint32 Time_____ssf__ = 5 [default = 0];
  if (has_time_____ssf__()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->time_____ssf__(), target);
  }

  // optional sint32 Time________ff = 6 [default = 0];
  if (has_time________ff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->time________ff(), target);
  }

  // optional sint32 LastPrice = 7 [default = 0];
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->lastprice(), target);
  }

  // optional sint32 AskPrice1 = 8 [default = 0];
  if (has_askprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->askprice1(), target);
  }

  // optional .QuantBox.Data.Serializer.V2.DepthTick Depth = 9;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->depth_, target);
  }

  // optional sint64 Volume = 10 [default = 0];
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(10, this->volume(), target);
  }

  // optional sint64 OpenInterest = 11 [default = 0];
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(11, this->openinterest(), target);
  }

  // optional sint64 Turnover = 12 [default = 0];
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(12, this->turnover(), target);
  }

  // optional sint32 AveragePrice = 13 [default = 0];
  if (has_averageprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->averageprice(), target);
  }

  // optional .QuantBox.Data.Serializer.V2.BarInfo Bar = 14;
  if (has_bar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->bar_, target);
  }

  // optional .QuantBox.Data.Serializer.V2.StaticInfo Static = 15;
  if (has_static_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->static__, target);
  }

  // optional .QuantBox.Data.Serializer.V2.StockSplitInfo Split = 16;
  if (has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *this->split_, target);
  }

  // optional sint32 LocalTime_Msec = 17 [default = 0];
  if (has_localtime_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->localtime_msec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuantBox.Data.Serializer.V2.PbTick)
  return target;
}

int PbTick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional .QuantBox.Data.Serializer.V2.ConfigInfo Config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

    // optional sint32 TradingDay = 2 [default = 0];
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tradingday());
    }

    // optional sint32 ActionDay = 3 [default = 0];
    if (has_actionday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->actionday());
    }

    // optional sint32 Time_HHmm = 4 [default = 0];
    if (has_time_hhmm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time_hhmm());
    }

    // optional sint32 Time_____ssf__ = 5 [default = 0];
    if (has_time_____ssf__()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time_____ssf__());
    }

    // optional sint32 Time________ff = 6 [default = 0];
    if (has_time________ff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time________ff());
    }

    // optional sint32 LastPrice = 7 [default = 0];
    if (has_lastprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lastprice());
    }

    // optional sint32 AskPrice1 = 8 [default = 0];
    if (has_askprice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->askprice1());
    }

  }
  if (_has_bits_[8 / 32] & 65280) {
    // optional .QuantBox.Data.Serializer.V2.DepthTick Depth = 9;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->depth_);
    }

    // optional sint64 Volume = 10 [default = 0];
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->volume());
    }

    // optional sint64 OpenInterest = 11 [default = 0];
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->openinterest());
    }

    // optional sint64 Turnover = 12 [default = 0];
    if (has_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->turnover());
    }

    // optional sint32 AveragePrice = 13 [default = 0];
    if (has_averageprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->averageprice());
    }

    // optional .QuantBox.Data.Serializer.V2.BarInfo Bar = 14;
    if (has_bar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bar_);
    }

    // optional .QuantBox.Data.Serializer.V2.StaticInfo Static = 15;
    if (has_static_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->static__);
    }

    // optional .QuantBox.Data.Serializer.V2.StockSplitInfo Split = 16;
    if (has_split()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->split_);
    }

  }
  // optional sint32 LocalTime_Msec = 17 [default = 0];
  if (has_localtime_msec()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->localtime_msec());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbTick::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PbTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbTick::MergeFrom(const PbTick& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::QuantBox::Data::Serializer::V2::ConfigInfo::MergeFrom(from.config());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_actionday()) {
      set_actionday(from.actionday());
    }
    if (from.has_time_hhmm()) {
      set_time_hhmm(from.time_hhmm());
    }
    if (from.has_time_____ssf__()) {
      set_time_____ssf__(from.time_____ssf__());
    }
    if (from.has_time________ff()) {
      set_time________ff(from.time________ff());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_askprice1()) {
      set_askprice1(from.askprice1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_depth()) {
      mutable_depth()->::QuantBox::Data::Serializer::V2::DepthTick::MergeFrom(from.depth());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_averageprice()) {
      set_averageprice(from.averageprice());
    }
    if (from.has_bar()) {
      mutable_bar()->::QuantBox::Data::Serializer::V2::BarInfo::MergeFrom(from.bar());
    }
    if (from.has_static_()) {
      mutable_static_()->::QuantBox::Data::Serializer::V2::StaticInfo::MergeFrom(from.static_());
    }
    if (from.has_split()) {
      mutable_split()->::QuantBox::Data::Serializer::V2::StockSplitInfo::MergeFrom(from.split());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_localtime_msec()) {
      set_localtime_msec(from.localtime_msec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PbTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbTick::CopyFrom(const PbTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbTick::IsInitialized() const {

  return true;
}

void PbTick::Swap(PbTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbTick::InternalSwap(PbTick* other) {
  std::swap(config_, other->config_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(actionday_, other->actionday_);
  std::swap(time_hhmm_, other->time_hhmm_);
  std::swap(time_____ssf___, other->time_____ssf___);
  std::swap(time________ff_, other->time________ff_);
  std::swap(lastprice_, other->lastprice_);
  std::swap(askprice1_, other->askprice1_);
  std::swap(depth_, other->depth_);
  std::swap(volume_, other->volume_);
  std::swap(openinterest_, other->openinterest_);
  std::swap(turnover_, other->turnover_);
  std::swap(averageprice_, other->averageprice_);
  std::swap(bar_, other->bar_);
  std::swap(static__, other->static__);
  std::swap(split_, other->split_);
  std::swap(localtime_msec_, other->localtime_msec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbTick_descriptor_;
  metadata.reflection = PbTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StaticInfo::kLowerLimitPriceFieldNumber;
const int StaticInfo::kUpperLimitPriceFieldNumber;
const int StaticInfo::kSettlementPriceFieldNumber;
const int StaticInfo::kSymbolFieldNumber;
const int StaticInfo::kExchangeFieldNumber;
#endif  // !_MSC_VER

StaticInfo::StaticInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuantBox.Data.Serializer.V2.StaticInfo)
}

void StaticInfo::InitAsDefaultInstance() {
}

StaticInfo::StaticInfo(const StaticInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuantBox.Data.Serializer.V2.StaticInfo)
}

void StaticInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lowerlimitprice_ = 0;
  upperlimitprice_ = 0;
  settlementprice_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticInfo::~StaticInfo() {
  // @@protoc_insertion_point(destructor:QuantBox.Data.Serializer.V2.StaticInfo)
  SharedDtor();
}

void StaticInfo::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StaticInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticInfo_descriptor_;
}

const StaticInfo& StaticInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PbTick_2eproto();
  return *default_instance_;
}

StaticInfo* StaticInfo::default_instance_ = NULL;

StaticInfo* StaticInfo::New(::google::protobuf::Arena* arena) const {
  StaticInfo* n = new StaticInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaticInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StaticInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lowerlimitprice_, upperlimitprice_);
    settlementprice_ = 0;
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_exchange()) {
      exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StaticInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuantBox.Data.Serializer.V2.StaticInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 LowerLimitPrice = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lowerlimitprice_)));
          set_has_lowerlimitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UpperLimitPrice;
        break;
      }

      // optional sint32 UpperLimitPrice = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_UpperLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &upperlimitprice_)));
          set_has_upperlimitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SettlementPrice;
        break;
      }

      // optional sint32 SettlementPrice = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Symbol;
        break;
      }

      // optional string Symbol = 4;
      case 4: {
        if (tag == 34) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QuantBox.Data.Serializer.V2.StaticInfo.Symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Exchange;
        break;
      }

      // optional string Exchange = 5;
      case 5: {
        if (tag == 42) {
         parse_Exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "QuantBox.Data.Serializer.V2.StaticInfo.Exchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuantBox.Data.Serializer.V2.StaticInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuantBox.Data.Serializer.V2.StaticInfo)
  return false;
#undef DO_
}

void StaticInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuantBox.Data.Serializer.V2.StaticInfo)
  // optional sint32 LowerLimitPrice = 1 [default = 0];
  if (has_lowerlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->lowerlimitprice(), output);
  }

  // optional sint32 UpperLimitPrice = 2 [default = 0];
  if (has_upperlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->upperlimitprice(), output);
  }

  // optional sint32 SettlementPrice = 3 [default = 0];
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->settlementprice(), output);
  }

  // optional string Symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QuantBox.Data.Serializer.V2.StaticInfo.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string Exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QuantBox.Data.Serializer.V2.StaticInfo.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuantBox.Data.Serializer.V2.StaticInfo)
}

::google::protobuf::uint8* StaticInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuantBox.Data.Serializer.V2.StaticInfo)
  // optional sint32 LowerLimitPrice = 1 [default = 0];
  if (has_lowerlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->lowerlimitprice(), target);
  }

  // optional sint32 UpperLimitPrice = 2 [default = 0];
  if (has_upperlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->upperlimitprice(), target);
  }

  // optional sint32 SettlementPrice = 3 [default = 0];
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->settlementprice(), target);
  }

  // optional string Symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QuantBox.Data.Serializer.V2.StaticInfo.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string Exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "QuantBox.Data.Serializer.V2.StaticInfo.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuantBox.Data.Serializer.V2.StaticInfo)
  return target;
}

int StaticInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional sint32 LowerLimitPrice = 1 [default = 0];
    if (has_lowerlimitprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lowerlimitprice());
    }

    // optional sint32 UpperLimitPrice = 2 [default = 0];
    if (has_upperlimitprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->upperlimitprice());
    }

    // optional sint32 SettlementPrice = 3 [default = 0];
    if (has_settlementprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->settlementprice());
    }

    // optional string Symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StaticInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaticInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaticInfo::MergeFrom(const StaticInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lowerlimitprice()) {
      set_lowerlimitprice(from.lowerlimitprice());
    }
    if (from.has_upperlimitprice()) {
      set_upperlimitprice(from.upperlimitprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_exchange()) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StaticInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticInfo::CopyFrom(const StaticInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticInfo::IsInitialized() const {

  return true;
}

void StaticInfo::Swap(StaticInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticInfo::InternalSwap(StaticInfo* other) {
  std::swap(lowerlimitprice_, other->lowerlimitprice_);
  std::swap(upperlimitprice_, other->upperlimitprice_);
  std::swap(settlementprice_, other->settlementprice_);
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticInfo_descriptor_;
  metadata.reflection = StaticInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockSplitInfo::kCashDividendFieldNumber;
const int StockSplitInfo::kStockDividendFieldNumber;
const int StockSplitInfo::kRightsOfferingFieldNumber;
const int StockSplitInfo::kRightsOfferingPriceFieldNumber;
const int StockSplitInfo::kPreCloseFieldNumber;
#endif  // !_MSC_VER

StockSplitInfo::StockSplitInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuantBox.Data.Serializer.V2.StockSplitInfo)
}

void StockSplitInfo::InitAsDefaultInstance() {
}

StockSplitInfo::StockSplitInfo(const StockSplitInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuantBox.Data.Serializer.V2.StockSplitInfo)
}

void StockSplitInfo::SharedCtor() {
  _cached_size_ = 0;
  cashdividend_ = 0;
  stockdividend_ = 0;
  rightsoffering_ = 0;
  rightsofferingprice_ = 0;
  preclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockSplitInfo::~StockSplitInfo() {
  // @@protoc_insertion_point(destructor:QuantBox.Data.Serializer.V2.StockSplitInfo)
  SharedDtor();
}

void StockSplitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockSplitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockSplitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockSplitInfo_descriptor_;
}

const StockSplitInfo& StockSplitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PbTick_2eproto();
  return *default_instance_;
}

StockSplitInfo* StockSplitInfo::default_instance_ = NULL;

StockSplitInfo* StockSplitInfo::New(::google::protobuf::Arena* arena) const {
  StockSplitInfo* n = new StockSplitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockSplitInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StockSplitInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cashdividend_, preclose_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockSplitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuantBox.Data.Serializer.V2.StockSplitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double CashDividend = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashdividend_)));
          set_has_cashdividend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_StockDividend;
        break;
      }

      // optional double StockDividend = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_StockDividend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stockdividend_)));
          set_has_stockdividend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_RightsOffering;
        break;
      }

      // optional double RightsOffering = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_RightsOffering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightsoffering_)));
          set_has_rightsoffering();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_RightsOfferingPrice;
        break;
      }

      // optional double RightsOfferingPrice = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_RightsOfferingPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightsofferingprice_)));
          set_has_rightsofferingprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_PreClose;
        break;
      }

      // optional double PreClose = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_PreClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preclose_)));
          set_has_preclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuantBox.Data.Serializer.V2.StockSplitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuantBox.Data.Serializer.V2.StockSplitInfo)
  return false;
#undef DO_
}

void StockSplitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuantBox.Data.Serializer.V2.StockSplitInfo)
  // optional double CashDividend = 1 [default = 0];
  if (has_cashdividend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cashdividend(), output);
  }

  // optional double StockDividend = 2 [default = 0];
  if (has_stockdividend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stockdividend(), output);
  }

  // optional double RightsOffering = 3 [default = 0];
  if (has_rightsoffering()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rightsoffering(), output);
  }

  // optional double RightsOfferingPrice = 4 [default = 0];
  if (has_rightsofferingprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rightsofferingprice(), output);
  }

  // optional double PreClose = 5 [default = 0];
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->preclose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuantBox.Data.Serializer.V2.StockSplitInfo)
}

::google::protobuf::uint8* StockSplitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuantBox.Data.Serializer.V2.StockSplitInfo)
  // optional double CashDividend = 1 [default = 0];
  if (has_cashdividend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cashdividend(), target);
  }

  // optional double StockDividend = 2 [default = 0];
  if (has_stockdividend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stockdividend(), target);
  }

  // optional double RightsOffering = 3 [default = 0];
  if (has_rightsoffering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rightsoffering(), target);
  }

  // optional double RightsOfferingPrice = 4 [default = 0];
  if (has_rightsofferingprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rightsofferingprice(), target);
  }

  // optional double PreClose = 5 [default = 0];
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->preclose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuantBox.Data.Serializer.V2.StockSplitInfo)
  return target;
}

int StockSplitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional double CashDividend = 1 [default = 0];
    if (has_cashdividend()) {
      total_size += 1 + 8;
    }

    // optional double StockDividend = 2 [default = 0];
    if (has_stockdividend()) {
      total_size += 1 + 8;
    }

    // optional double RightsOffering = 3 [default = 0];
    if (has_rightsoffering()) {
      total_size += 1 + 8;
    }

    // optional double RightsOfferingPrice = 4 [default = 0];
    if (has_rightsofferingprice()) {
      total_size += 1 + 8;
    }

    // optional double PreClose = 5 [default = 0];
    if (has_preclose()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockSplitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockSplitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockSplitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockSplitInfo::MergeFrom(const StockSplitInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cashdividend()) {
      set_cashdividend(from.cashdividend());
    }
    if (from.has_stockdividend()) {
      set_stockdividend(from.stockdividend());
    }
    if (from.has_rightsoffering()) {
      set_rightsoffering(from.rightsoffering());
    }
    if (from.has_rightsofferingprice()) {
      set_rightsofferingprice(from.rightsofferingprice());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StockSplitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockSplitInfo::CopyFrom(const StockSplitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockSplitInfo::IsInitialized() const {

  return true;
}

void StockSplitInfo::Swap(StockSplitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockSplitInfo::InternalSwap(StockSplitInfo* other) {
  std::swap(cashdividend_, other->cashdividend_);
  std::swap(stockdividend_, other->stockdividend_);
  std::swap(rightsoffering_, other->rightsoffering_);
  std::swap(rightsofferingprice_, other->rightsofferingprice_);
  std::swap(preclose_, other->preclose_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockSplitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockSplitInfo_descriptor_;
  metadata.reflection = StockSplitInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace V2
}  // namespace Serializer
}  // namespace Data
}  // namespace QuantBox

// @@protoc_insertion_point(global_scope)
